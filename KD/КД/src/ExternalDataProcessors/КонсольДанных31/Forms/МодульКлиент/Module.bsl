#Область БИБЛИОТЕКА_ФУНКЦИЙ_КЛИЕНТ

#Область ЗАПУСК

// Выполняет метод ВОЛНА. Предназначен для вызова с клиента: как из обработки, так и из модуля.
//	Нужна только в клиентском модуле, т.к. только там нужен &НаКлиенте.
//	КлиентСерверный модуль вызывается из макета по тексту, серверные - из модуля объекта
// Параметры:
//  ТекстВызова  - Строка - Текст вызова метода
//  СПрм  - Структура/Неопределено - Параметры вызова метода. По умолчанию Неопределено.
//  ЭтоФункция  - Булево - Вызвать как функцию. По умолчанию Ложь = вызов процедуры.
// Возвращаемое значение:
//   Произвольный   - Результат выполнения метода.Если ВернутьУспх = Истина Тогда возвращает структуру с ключами Успех и Результат
&НаКлиенте
Функция ВыполнитьМетодВОЛНА(ТекстВызова, СПрм = Неопределено, ЭтоФункция = Ложь) Экспорт
	АвтоЗаголовок = 100;
	ЭтоМодуль = АвтоЗаголовок = 100;
	Если ЭтоМодуль Тогда
		#Область ЭТО_МОДУЛЬ
			ПозСкобки = СтрНайти(ТекстВызова, "(");
			мТекстВСкобках = СтрРазделить(Сред(ТекстВызова, ПозСкобки + 1, СтрДлина(ТекстВызова) - ПозСкобки - 1), ",", Истина);
			ВыполняемыйТекст = "";
			Для каждого ПараметрВызова Из мТекстВСкобках Цикл
				ВыполняемыйТекст = ВыполняемыйТекст + ","
						+ ?(ЗначениеЗаполнено(ПараметрВызова), "СПрм." + СокрЛП(ПараметрВызова), "");
			КонецЦикла;
			ВыполняемыйТекст = Лев(ТекстВызова, ПозСкобки) + Сред(ВыполняемыйТекст, 2) + ")";
			Если ЭтоФункция Тогда
				Результат = Вычислить(ВыполняемыйТекст);
			Иначе
				Выполнить(ВыполняемыйТекст);
				Результат = Неопределено;
			КонецЕсли;
		#КонецОбласти
	Иначе
		#Область ЭТО_ОБРАБОТКА
			ИмяМодуля = Лев(ТекстВызова, СтрНайти(ТекстВызова, ".") - 1);
			Если ВРег(ИмяМодуля) = "ВОЛНА_ОБЩЕГОНАЗНАЧЕНИЯКС" Тогда
				Результат = Вычислить("ВладелецФормы.ВыполнитьПоТекстуМетода(ТекстВызова, СПрм)");
			Иначе
				Результат = Вычислить("ВладелецФормы.ВыполнитьМетодНастоящегоОбъекта(ТекстВызова, ЭтоФункция, СПрм)");
			КонецЕсли;
		#КонецОбласти
	КонецЕсли;
	Возврат Результат
КонецФункции // ВыполнитьМетодВОЛНА

#Конецобласти

#Область ИНТЕРАКТИВ

#Область ВЫБРАТЬ_ФАЙЛ_И_ПРОДОЛЖИТЬ
	
// Открывает диалог выбора файла и передаёт выполнение в заданную процедуру
// Параметры:
//  ИмяПроцедуры  - Строка - Имя метода (процедуры) продолжения после выбора. Параметры 1 = Строка и 2 = Структура. Если при выборе произойдёт ошибка,
//			в третьем параметре будут ключи Ошибка__СтандартнаяОбработка и Ошибка__ИнфоОбОшибке, а результат будет пустой строкой.
//  ВызывающаяФорма  - ФормаКлиентскогоПриложения/Форма - Форма, из которой будет вызван обработчик оповещения
//			с параметрами ВыбранныеФайлы (массив полных имён выбранных файлов/Неопределено) и ДополнительныеПараметры (см.ПараметрыПродолжения)
//  ПараметрыПродолжения  - Структура - Второй параметр метода продолжения. В процессе выполнения дополняется параметрами Параметр_ИмяПроцедуры И Параметр_ВызывающаяФорма.
//  Фильтр  - Строка - Фильтр в формате "Описание расширения (*.Расширение)|*.Расширение|...". По умолчанию xlsx.
//  ИндексФильтра  - Число - Индекс главного фильтра в строке фильтров. По умолчанию 0.
//  МножественныйВыбор  - Булево - Возможность выбрать несколько файлов
//  Заголовок  - Строка - Заголовок диалога. Если не указан - сформируется автоматически.
//  Режим  - РежимДиалогаВыбораФайла - Режим диалога. По умолчанию Открытие.
//  Каталог  - Строка - Каталог, в котором откроется диалог
//  ПолноеИмяФайла  - Строка - Полное имя файла по умолчанию. Если не указано - сгенерирует ДляЗагрузки.
//  ПроверятьСуществованиеФайла  - Булево - Параметр диалога. По умолчанию ЛОЖЬ
//  ПредварительныйПросмотр  - Булево - Параметр диалога. По умолчанию ЛОЖЬ
//  Расширение  - Строка - Расширение файла. Если не указано - сформируется по главному фильтру.
&НаКлиенте
Процедура ВыбратьФайлИПродолжить(ИмяПроцедуры,
	    ВызывающаяФорма,
		ПараметрыПродолжения = Неопределено,
		Фильтр = "#АВТО",
		ИндексФильтра = 0,
		МножественныйВыбор = Истина,
		Заголовок = "#АВТО",
		Режим = Неопределено,
		Каталог = "#АВТО",
		ПолноеИмяФайла = "#АВТО",
		ПроверятьСуществованиеФайла = Ложь,
		ПредварительныйПросмотр = Ложь,
		Расширение = "#АВТО") Экспорт
	#Если ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		#Область ИНИЦИАЛИЗАЦИЯ_ПАРАМЕТРОВ_ПО_УМОЛЧАНИЮ
			Если Режим = Неопределено Тогда
				Режим = РежимДиалогаВыбораФайла.Открытие;
			КонецЕсли;
			Если ПараметрыПродолжения = Неопределено Тогда
				ПараметрыПродолжения = Новый Структура;
			КонецЕсли;
			Если Фильтр = "#АВТО" Тогда
				Фильтр = НСтр("ru = 'Книга Excel|*.xlsx'");
			КонецЕсли;
			Если Расширение = "#АВТО" Тогда
				Расширение = СтрПолучитьСтроку(
						СтрЗаменить(
							СтрПолучитьСтроку(
								СтрЗаменить(Фильтр, "|", Символы.ПС),
								2 * ИндексФильтра + 1),
							".",
							Символы.ПС),
						2);
			КонецЕсли;
			Если Заголовок = "#АВТО" Тогда
				Заголовок = ?(Режим = РежимДиалогаВыбораФайла.Сохранение,
						НСтр("ru = 'Выбор пути сохранения'"),
						?(Режим = РежимДиалогаВыбораФайла.ВыборКаталога,
						НСтр("ru = 'Выбор каталога'"),
						НСтр("ru = 'Выбор открываемых файлов'")));
			КонецЕсли;
		#КонецОбласти
		#Область ИНИЦИАЛИЗАЦИЯ_ДИАЛОГА
			ДВФ = Новый ДиалогВыбораФайла(Режим);
			ДВФ.Заголовок = Заголовок;
			ДВФ.ИндексФильтра = ИндексФильтра;
			ДВФ.МножественныйВыбор = МножественныйВыбор;
			ДВФ.ПредварительныйПросмотр = ПредварительныйПросмотр;
			ДВФ.ПроверятьСуществованиеФайла = ПроверятьСуществованиеФайла;
			ДВФ.Расширение = Расширение;
			ДВФ.Фильтр = Фильтр;
		#КонецОбласти
		ПараметрыПродолжения.Вставить("ВызывающаяФорма", ВызывающаяФорма);
		ПараметрыПродолжения.Вставить("ИмяПроцедуры", ИмяПроцедуры);
		СтрПрм = Новый Структура("ДВФ,ПараметрыПродолжения,ПолноеИмяФайла",
				ДВФ, ПараметрыПродолжения, ПолноеИмяФайла);
		ВызватьПродолжение = Истина;
		Если Каталог = "#АВТО" Тогда
		    Если ?(ПолноеИмяФайла = "#АВТО", Ложь, ЗначениеЗаполнено(ПолноеИмяФайла)) Тогда
				Каталог = ВыполнитьМетодВОЛНА("ВОЛНА_ОбщегоНазначенияКС.ИмяКаталога(П1)", Новый Структура("П1", ПолноеИмяФайла), Истина) + "\";
			Иначе
				НачатьПолучениеКаталогаДокументов(Новый ОписаниеОповещения("Выбрать_ФайлИПродолжить", ЭтотОбъект, СтрПрм, "Выбрать_Файл_Ошибка", ЭтотОбъект));
				ВызватьПродолжение = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ВызватьПродолжение Тогда
			Выбрать_ФайлИПродолжить(Каталог, СтрПрм);
		КонецЕсли;
	#КонецЕсли
КонецПроцедуры // ВыбратьФайлИПродолжить

// Служебная для ВыбратьФайлИПродолжить
// Параметры:
//  Результат  - Строка/Неопределено - Результат получения каталога
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика
&НаКлиенте
Процедура Выбрать_ФайлИПродолжить(Результат, СтруктураПараметров = Неопределено) Экспорт
	ТекТип = ТипЗнч(Результат);
	Если ТекТип = Тип("Строка") И ?(СтруктураПараметров = Неопределено, Истина, НЕ СтруктураПараметров.Свойство("Ошибка__ИнфоОбОшибке")) Тогда
		Если СтруктураПараметров.ПолноеИмяФайла = "#АВТО" Тогда
			СтруктураПараметров.ПолноеИмяФайла = Результат + "ДляЗагрузки." + СтруктураПараметров.ДВФ.Расширение;
		КонецЕсли;
		СтруктураПараметров.ДВФ.Каталог = Результат;
		СтруктураПараметров.ДВФ.ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяФайла;
		СтруктураПараметров.ДВФ.Показать(
				Новый ОписаниеОповещения(
					СтруктураПараметров.ПараметрыПродолжения.ИмяПроцедуры,
					СтруктураПараметров.ПараметрыПродолжения.ВызывающаяФорма,
					СтруктураПараметров.ПараметрыПродолжения,
					"Выбрать_Файл_Ошибка",
					ЭтотОбъект));
	ИначеЕсли Результат <> Неопределено Тогда
		Выполнить("СтруктураПараметров.ВызывающаяФорма." + СтруктураПараметров.ИмяПроцедуры + "(Результат, СтруктураПараметров)");
	КонецЕсли;
КонецПроцедуры // Выбрать_ФайлИПродолжить

// Служебная для ВыбратьФайлИПродолжить
&НаКлиенте
Процедура Выбрать_Файл_Ошибка(ИнфоОбОшибке, СтандартнаяОбработка, ПараметрыПриОшибке = Неопределено) Экспорт
	Если ПараметрыПриОшибке = Неопределено Тогда
		ПараметрыПриОшибке = Новый Структура;
	КонецЕсли;
	ПараметрыПриОшибке.Вставить("Ошибка__СтандартнаяОбработка", СтандартнаяОбработка);
	ПараметрыПриОшибке.Вставить("Ошибка__ИнфоОбОшибке", ИнфоОбОшибке);
	Выбрать_ФайлИПродолжить("", ПараметрыПриОшибке);
	СтандартнаяОбработка = ПараметрыПриОшибке.Ошибка__СтандартнаяОбработка;
КонецПроцедуры // Выбрать_Файл_Ошибка

#КонецОбласти

// Предлагает выбрать реквизит заданного объекта и возвращает его имя
// Параметры:
//  ЧейРеквизит  - Произвольный - Объект, реквизит которого будет предложен к выбору
// Возвращаемое значение:
//   Строка   - Имя ТЧ и реквизита, например "Банк" или "Товары.Количество"
&НаКлиенте
Функция ИмяВыбранногоРеквизита(ЧейРеквизит) Экспорт
	Результат = "НЕ ГОТОВО";
	//Реализовать одним из двух вариантов:
	//А) открыть дерево МД в нужной ветке
	//Б) прочитать МД со значениями (для ТЧ и ТЗ - первой строки)
	//Также должны отрабатываться ситуации для таблицы значений, массива, списка значений, структуры и их фиксиков.
	Возврат Результат
КонецФункции // ИмяВыбранногоРеквизита()
 
// Возвращает ответ, данный пользователем несколько раз (для предотвращения случайных опаснх действий)
//
// Параметры:
//  Кнопки  - РежимДиалогаВопрос; СписокЗначений - параметр функции Вопрос, по умолчанию РежимДиалогаВопрос.ДаНет
//  КоличествоПовторов  - Число - Количество попыток (сколько раз спросить)
//  ТекстВопроса  -  Строка; ФорматированнаяСтрока - параметр функции Вопрос
//  ТаймАут  - Число - параметр функции Вопрос
//  КнопкаПоУмолчанию  - Произвольный - параметр функции Вопрос
//  Заголовок  - Строка; ФорматированнаяСтрока - параметр функции Вопрос
//  КнопкаТаймАута  - Произвольный - параметр функции Вопрос
//
// Возвращаемое значение:
//   Произвольный   - Если пользователь назвал во всех попытках одно значение - то оно, если нет - неопределено
//
&НаКлиенте
Функция СпроситьТрижды(Кнопки = Неопределено, КоличествоПовторов = 3, ТекстВопроса = "", ТаймАут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "Хитрый вопрос", КнопкаТаймАута = Неопределено) Экспорт
	Если Кнопки = Неопределено Тогда
		Кнопки = РежимДиалогаВопрос.ДаНет;
	КонецЕсли;
	Результат = Неопределено;
	Для Ё = 1 По КоличествоПовторов Цикл
		Если ТипЗнч(Кнопки) = Тип("СписокЗначений") Тогда
			ВыполнитьМетодВОЛНА(
					"ВОЛНА_ОбщегоНазначенияКС.ПеремешатьСписок(Кнопки)",
					Новый Структура("Кнопки", Кнопки));	
		КонецЕсли; 
		Промежуточный = Вопрос(ТекстВопроса, Кнопки, ТаймАут, КнопкаПоУмолчанию, Заголовок, КнопкаТаймАута);
		Если Результат = Неопределено Тогда
			Результат = Промежуточный;
		ИначеЕсли Результат <> Промежуточный Тогда
			Результат = Неопределено;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Возврат Результат;
КонецФункции // СпроситьТрижды()

#КонецОбласти 

#КонецОбласти

#Область ВЫПОЛНЕНИЕ
 
&НаКлиенте
Процедура ВызватьАлгоритмКлиент(Код, Прм = Неопределено, Подготовка = Истина) Экспорт
	Если Прм = Неопределено Тогда
		Прм = Новый Структура;
	КонецЕсли;
	Если Подготовка Тогда
		Если Прм.Свойство("Алгоритмы") Тогда
			Объект.Алгоритмы = Прм.Алгоритмы
		Иначе
			Прм.Вставить("Алгоритмы", Объект.Алгоритмы);
		КонецЕсли;
		Если Прм.Свойство("Предмет") Тогда
			Объект.Удалить_Предмет = Прм.Предмет
		Иначе
			Прм.Вставить("Предмет", Объект.Удалить_Предмет);
		КонецЕсли;
		Если Прм.Свойство("СПарам") Тогда
			СПарам = Прм.СПарам
		Иначе
			Прм.Вставить("Спарам", СПарам);
		КонецЕсли;
	КонецЕсли;
	Выполнить(ВладелецФормы.ДобавитьПараметрыВВыполняемыйКод(
			Код,
			ВыполнитьМетодВОЛНА("ВОЛНА_ОбщегоНазначенияКС.СброситьСтруктуру(Прм)", Новый Структура("Прм", Прм), Истина)));
	Если Подготовка Тогда
		ЗаполнитьЗначенияСвойств(Прм, Объект, "Предмет");
	КонецЕсли;
	Прм.Вставить("СПарам", СПарам);
КонецПроцедуры

&НаКлиенте
Процедура ВызватьАлгоритмФорма(Код, Прм = Неопределено, Подготовка = Истина, ТекстПараметр = "") Экспорт
	Если Прм = Неопределено Тогда
		Прм = Новый Структура;
	КонецЕсли;
	Если Подготовка Тогда
		Если Прм.Свойство("Алгоритмы") Тогда
			Объект.Алгоритмы = Прм.Алгоритмы
		Иначе
			Прм.Вставить("Алгоритмы", Объект.Алгоритмы);
		КонецЕсли;
		Если Прм.Свойство("Предмет") Тогда
			Объект.Предмет = Прм.Предмет
		Иначе
			Прм.Вставить("Предмет", Объект.Предмет);
		КонецЕсли;
		Если Прм.Свойство("СПарам") Тогда
			СПарам = Прм.СПарам
		Иначе
			Прм.Вставить("Спарам", СПарам);
		КонецЕсли;
	КонецЕсли;
	ВладелецФормы.ВызватьАлгоритмФорма(Код, Прм);
	Если Подготовка Тогда
		ЗаполнитьЗначенияСвойств(Прм, Объект, "Предмет");
	КонецЕсли;
	Прм.Вставить("Спарам", СПарам);
КонецПроцедуры

// Выполняет библиотечный метод объекта
// Параметры:
//  ИмяМетода  - Строка - Имя вызываемого метода
//  Параметр01..25  - Произвольные - Параметры вызываемого метода
// Возвращаемое значение:
//   Произвольный   - Результат выполнения метода
&НаКлиенте
Функция ВызватьБиблиотечныйВС(ИмяМетода, Параметр01 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр02 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр03 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр04 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр05 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр06 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр07 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр08 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр09 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр10 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр11 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр12 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр13 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр14 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр15 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр16 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр17 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр18 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр19 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр20 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр21 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр22 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр23 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр24 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр25 = "НЕ____БЫЛ_____НАЗНАЧЕН")
	Результат = ВладелецФормы.ВызватьССервераБиблиотечныйМетодОбъекта(ИмяМетода, Параметр01, Параметр02, Параметр03, Параметр04, Параметр05,
			Параметр06, Параметр07,  Параметр08, Параметр09, Параметр10, Параметр11, Параметр12, Параметр13, Параметр14, Параметр15, Параметр16, Параметр17,
			Параметр18, Параметр19, Параметр20, Параметр21, Параметр22, Параметр23, Параметр24, Параметр25);
	Возврат Результат
КонецФункции // ВызватьБиблиотечныйВС

#КонецОбласти

