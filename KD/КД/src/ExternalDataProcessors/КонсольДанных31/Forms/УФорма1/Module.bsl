&НаКлиенте
Перем ФормаМодульКлиент; //Ссылка на ФКП МодульКлиент

&НаКлиенте
Перем ТрансляторКС; //Структура ИмяМетода => Текст, ЭтоФункция

#Область ПРОГРАММНЫЙ_ИНТЕРФЕЙС

// Добавляет команду в дерево дочерней формы - по ИД из макета или новую
// Параметры:
//  ИДПередКоторымВставить  - Строка - ИД команды, перед которой добавить новую. Если команда добавляется последней - указывается ИД её родителя с "К" на конце.
&НаКлиенте
Процедура ДобавитьКоманду(ИДПередКоторымВставить = "") Экспорт
	Если ЗначениеЗаполнено(ИДПередКоторымВставить) Тогда
		ОткрытьФорму("ВнешняяОбработка.КонсольДанных30.Форма.УФормаСохраненияКоманды", Новый Структура("ПутьККоманде", ИДПередКоторымВставить), ЭтотОбъект, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры // ДобавитьКоманду

// Записывает новую команду с заданными параметрами в дерево
// Параметры:
//  ПараметрыСохранения  - Структура - Ключи ИмяКоманды,ИмяПодменю,Подсказка,ПредставлениеКоманды,ПредставлениеПодменю,ПутьККоманде,ПутьККартинке,ПередПосле,
//				ПерезаписатьТекстЗапроса,ПерезаписатьТекстКода,СохранитьТекстКода,СохранитьТекстЗапроса,СохранитьПредмет,
//				СохранитьПараметры,СохранитьКоманды,СохранитьМеню,СохранитьЧАКО,ЭтоРазделитель,СохранитьСКД,СохранитьТаб1,СохранитьТаб2,СохранитьТД,ТолькоДляМеня,ХотКей 
//	КудаСохранять - Строка - Пустая для команд. Для записи настроек = Имя настройки, или #Файл, или #Авто, или #Текущие
// Возвращаемое значение:
//   Число   - Найденных.
//				+ записывается в общее хранилище команда (структура)
//					ХранилищеОбщихНастроек.Сохранить("КонсольДанных_____", ИмяНастроек, ЭтиНастройки,, Имя_Пользователя);
//				где ключи см.МО.СтандартныйСписокНастроек(): ДобавленныеТаблицы,ДопТаблица,
//				ЕстьДобавленныеТаблицы,ЕстьДопТаблица,ЕстьМВТ,ЕстьПараметры_,ЕстьПредмет,ЕстьСКД,ЕстьТабДокумент,ЕстьТабЗначений,ЕстьТекстЗапроса,ЕстьТекстКода,ЕстьЧАКО,
//				МВТ,Параметры_,Предмет,СКД,НастройкиСКД,ПерезаписатьТекстЗапроса,ПерезаписатьТекстКода,ТабДокумент,ТабЗначений,ТекстЗапроса,ТекстКода,ЧАКО
&НаКлиенте
Функция ЗаписатьНовуюСК(ПараметрыСохранения, КудаСохранять) Экспорт
	ПараметрыСохранения.Вставить("Результат", 0);
	Если ЗначениеЗаполнено(КудаСохранять) Тогда
		Если КудаСохранять = "#Файл" Тогда
			АдресСохранения = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			ПараметрыСохранения.Вставить("ВХранилищеОбщих", Ложь);
			ПараметрыСохранения.Вставить("ПутьСохранения", АдресСохранения);
		ИначеЕсли КудаСохранять = "#Текущие" Тогда
			ПараметрыСохранения.Вставить("ВХранилищеОбщих", Истина);
			ПараметрыСохранения.Вставить("ПутьСохранения", "#Текущие");
		Иначе
			ПараметрыСохранения.Вставить("ВХранилищеОбщих", Истина);
			ПараметрыСохранения.Вставить("ПутьСохранения", ПараметрыСохранения.ИмяКоманды);//КудаСохранять);
			Имена_Настроек.Добавить(ПараметрыСохранения.ИмяКоманды, ПараметрыСохранения.ИмяКоманды);
		КонецЕсли;
		Если ПараметрыСохранения.СохранитьКоманды Тогда
			ПараметрыСохранения.Вставить("КомандыСписок", КомандыСписок);
		КонецЕсли;
		Если ПараметрыСохранения.СохранитьМеню Тогда
			ПараметрыСохранения.Вставить("АдресДереваМеню", АдресДереваМеню);
		КонецЕсли;
		ПараметрыСохранения.Вставить("НастройкиЧАКО", НастройкиЧАКО);
		ПараметрыСохранения.Вставить("Имена_Настроек", Имена_Настроек.Скопировать());
		ПараметрыСохранения.Вставить("ИнтервалАвтосохраненияВСекундах", ИнтервалАвтосохраненияВСекундах);
		Код = "Результат = ПодготовитьИСохранитьНастройки(ПутьСохранения, Прм,, ВХранилищеОбщих)"
	Иначе
		Код = "Результат = ЗаписатьКоманду(Прм)";
	КонецЕсли;
	ВызватьАлгоритмОбъект(Код, ПараметрыСохранения);
	Если КудаСохранять = "#Файл" Тогда
		НачатьПолучениеФайлаССервера(, АдресСохранения, ПутьДляСохранения);
		ПоместитьВоВременноеХранилище(Неопределено, АдресСохранения);
	КонецЕсли;
	Возврат ПараметрыСохранения.Результат
КонецФункции // ЕстьВДеревеМеню

// Возвращает наличие команды в дереве меню
// Параметры:
//  ИмяКоманды  - Строка - Имя искомой команды
// Возвращаемое значение:
//   Булево   - Команда есть в списке команд
&НаКлиенте
Функция КомандаЕстьВСК(ИмяКоманды) Экспорт
	Результат = ЕстьВДеревеМеню(ИмяКоманды);
	Возврат Результат
КонецФункции // КомандаЕстьВСК

//Читает данные этажа ветки МД с сервера, пересохраняет дерево с учётом прочитанного, и возвращает массив структур по прочитанным строкам
// Параметры:
//	Путь - Строка - многострочная, где каждая строка = уровень дерева = от корня до читаемой строки
// Возвращаемое значение:
//   Массив структур/Неопределено   - Прочитанные строки или Неопределено, если путь не найден
&НаСервере
Функция ПрочитатьМДсСервера(Путь) Экспорт
	Результат = Неопределено;
	Дровина = ПолучитьИзВременногоХранилища(АдресДереваМД);
	Ветка = Дровина;
	КСтрок = СтрЧислоСтрок(Путь);
	ПутьПройден = Истина;
	Для Ё = 0 По КСтрок - 2 Цикл
		Ветка = Ветка.Строки.Найти(СтрПолучитьСтроку(Путь, КСтрок - Ё), "Команда");
		Если Ветка = Неопределено Тогда
			ПутьПройден = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если ПутьПройден Тогда
		Дровина.Колонки.Команда.Имя = "Представление";
		Настоящий = Неопределено;
		ПроверитьНастоящий(Настоящий);
		Настоящий.ЗаполнитьДеревоМД(Ветка, Ветка.МД);
		Дровина.Колонки.Представление.Имя = "Команда";
		Результат = Новый Массив;
		Для каждого СтрокаМД Из Ветка.Строки Цикл
			ЛокРез = Новый Структура("Команда,ТекстДляКода,ТекстДляЗапроса");
			ЗаполнитьЗначенияСвойств(ЛокРез, СтрокаМД);
			Результат.Добавить(ЛокРез);
		КонецЦикла;
		ПоместитьВХранилищеФормы(Дровина, АдресДереваМД);
	КонецЕсли;
	Возврат Результат
КонецФункции
 
// Удаляет команду с заданным ИД из меню. Встроенные команды помечаются ДопИнф = "СКРЫТЬ"
// Параметры:
//  Результат  - КодВозвратаДиалога - Результат обрабочика
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика. Ключи ИДУдаляемой и АдресДерева
&НаКлиенте
Процедура УдалитьИДизМеню(Результат, СтруктураПараметров = Неопределено) Экспорт
	Если Результат = "ДА" ИЛИ Результат = КодВозвратаДиалога.Да ИЛИ Результат = "Подменю" Тогда
		УдалитьИзДереваМеню(СтруктураПараметров.ИДУдаляемой, Результат = "Подменю");
	КонецЕсли;
КонецПроцедуры // УдалитьИДизМеню
					   
// Удаляет команду из дерева дочерней формы
// Параметры:
//  ИДУдаляемой  - Строка - ИД удаляемой команды.
&НаКлиенте
Процедура УдалитьКоманду(ИДУдаляемой) Экспорт
	ТекВопрос = ПроверитьИДвМеню(ИДУдаляемой);
	СтруктураПараметров = Новый Структура("ИДУдаляемой", ИДУдаляемой);
	СЗ_Кнопки = Новый СписокЗначений;
	СЗ_Кнопки.Добавить("ДА", "ДА");
	СЗ_Кнопки.Добавить("НЕТ", "НЕТ");
	СЗ_Кнопки.Добавить("Подменю", "Вместе с подменю");
	Если ТекВопрос = "" Тогда
		УдалитьИДизМеню(КодВозвратаДиалога.Да, СтруктураПараметров);
	ИначеЕсли ТекВопрос = "ИД не обнаружен в меню" Тогда
		Сообщить(ТекВопрос);
	ИначеЕсли СтрНайти(ТекВопрос, "Удалить вместе с подменю?") > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьИДизМеню", ЭтотОбъект, СтруктураПараметров), ТекВопрос, СЗ_Кнопки);
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьИДизМеню", ЭтотОбъект, СтруктураПараметров), ТекВопрос, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры // УдалитьКоманду

#КонецОбласти

#Область СОБЫТИЯ_ФОРМЫ
	
//Обработчик события.
//Когда вызывается из конструктора СКД в Толстом клиенте, ВыбранноеЗначение - СхемаКомпоновкиДанных, а ИсточникВыбора - КонструкторСхемыКомпоновкиДанных.
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Настройки_СКД = ВыбранноеЗначение.ВариантыНастроек[0].Настройки;
		ТекСКД = ВыбранноеЗначение;
		АдресСКД = ПоместитьВХранилищеФормы(ТекСКД, АдресСКД);
	#КонецЕсли 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		ВызватьАлгоритмСервер("МВТ.Закрыть()");
		Если НЕ ИнтервалАвтосохраненияВСекундах = 9999999999 Тогда
			СохранитьВсеТекущиеНастройки();
		КонецЕсли;
	ИначеЕсли НЕ ИнтервалАвтосохраненияВСекундах = 9999999999 И ТекущаяУниверсальнаяДатаВМиллисекундах() - ПоследнееАС > 90000 Тогда
		ТекстПредупреждения = "Консоль данных: Последнее автосохранение было более 1,5 минут назад. Закрыть без сохранения?";
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Область СПИСОК_ВЫБОРА_ЗНАЧЕНИЙ_ПАРАМЕТРОВ
		ТекСВ = Элементы.Параметры_ЗначениеПараметра.СписокВыбора;
		ТекСВ.Добавить("Результат = ", "Код");
		ТекСВ.Добавить("&Код", "Выражение");
		ТекСВ.Добавить("&ТабЗначений", "Таб1");
		ТекСВ.Добавить("&ДопТаблица", "Таб2");
		ТекСВ.Добавить("&Предмет", "Прдм");
	#КонецОбласти
	СформироватьКомандныеПанели();
	#Область ТЕКСТ_О_ПРАВАХ
		Если НетПрав() Тогда
			ПоказатьТекстОПравах();
		КонецЕсли;
	#КонецОбласти
	Если ФормаМодульКлиент = Неопределено Тогда
		ФормаМодульКлиент = ПолучитьФорму("ВнешняяОбработка.КонсольДанных30.Форма.МодульКлиент",, ЭтотОбъект, 1);
	КонецЕсли;
	Элементы.Пользователь_.СписокВыбора.Добавить("№№№");
	ТрансляторКС = СобратьТрансляциюМодуляКС();
	СтартОжиданияАвтоСохранения();
	Сообщить(СообщалкаПриОткрытии);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	СообщалкаПриОткрытии = Настоящий.Планы____();
	//ЭлементыКоманд = Новый Структура;
	//ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
	МодульКС = Настоящий.ПолучитьМакет("МодульКС").ПолучитьТекст();
	МенюНастройкиИКомандыВРеквизиты(Настоящий);
	ПрименитьНастройки(Настоящий, Истина);
	НоваяДоска = Новый ДеревоЗначений;
	Настоящий.ЗаполнитьДеревоМД(НоваяДоска);
	НоваяДоска.Колонки.Представление.Имя = "Команда";
	НоваяДоска.Колонки.Добавить("Имя");
	НоваяДоска.Колонки.Добавить("ПолноеОписание");
	АдресДереваМД = ПоместитьВХранилищеФормы(НоваяДоска, АдресДереваМД);
КонецПроцедуры

#КонецОбласти 

#Область СОБЫТИЯ_ЭЛЕМЕНТОВ
	
&НаКлиенте
Процедура ИнтервалАвтосохраненияВСекундахПриИзменении(Элемент)
	СтартОжиданияАвтоСохранения();
КонецПроцедуры

&НаКлиенте
Процедура Пользователь_НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	ТекСписок = Элементы.Пользователь_.СписокВыбора;
	ТекСписок.Очистить();
	Для каждого Имечко Из СписокПользователейИБ() Цикл
		ТекСписок.Добавить(Имечко, Имечко);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Файл_НачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтрПрм = Новый Структура("ИмяЭлементаКуда", "Файл_");//ПутьДляСохранения);
	ФормаМодульКлиент.ВыбратьФайлИПродолжить(
			"ВставитьРезультатВТекст",
		    ЭтотОбъект,
			СтрПрм,
			"Файлы консоли данных|*.КД3",,
			Ложь,,,,
			ПутьДляСохранения);
КонецПроцедуры

#КонецОбласти

#Область КОМАНДЫ

#Область НАСТОЯЩИЕ_КОМАНДЫ

#Область БЕЗ_КНОПОК
	
&НаКлиенте
Процедура Ничего(Команда)
КонецПроцедуры

#КонецОбласти

#Область С_КНОПКАМИ

#Область БУФЕР
	
&НаКлиенте
Процедура ВБуфер(Команда)
	Если ТекущийЭлемент = Элементы.ТекстКода ИЛИ ТекущийЭлемент = Элементы.ТекстЗапроса Тогда
		ТекБуфер = ТекущийЭлемент.ВыделенныйТекст;
	ИначеЕсли ТекущийЭлемент = Элементы.ТабЗначений ИЛИ ТекущийЭлемент = Элементы.ДопТаблица ИЛИ ТекущийЭлемент = Элементы.НастройкиЧАКО
			ИЛИ ТекущийЭлемент = Элементы.Параметры_ ИЛИ ТекущийЭлемент = Элементы.Настройки_Значение Тогда
		ИмяКолонки = ПолучитьИмяКолонкиДанных(ТекущийЭлемент.ТекущийЭлемент.Имя);
		ТекБуфер = ТекущийЭлемент.ТекущиеДанные[ИмяКолонки];//ТекущийЭлемент.ТекущаяСтрока[ТекущийЭлемент.ТекущийЭлемент.Имя];
	ИначеЕсли ТекущийЭлемент = Элементы.ТабДокумент Тогда
		ТекОбласть = Элементы.ТабДокумент.ТекущаяОбласть;
		Если ТипЗнч(ТекОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			ТекБуфер = ?(ТекОбласть.СодежитЗначение, ТекОбласть.Значение, ТекОбласть.Текст);
		ИначеЕсли ТипЗнч(ТекОбласть) = Тип("РисунокТабличногоДокумента") Тогда
			ТекБуфер = ТекОбласть.Картинка;
		КонецЕсли;
	ИначеЕсли ТекущийЭлемент = Элементы.Предмет Тогда
		ТекБуфер = Предмет;
	ИначеЕсли ТекущийЭлемент = Элементы.Файл_ Тогда
		ТекБуфер = "";
	КонецЕсли;
	Буфер = ТекБуфер;
КонецПроцедуры

&НаКлиенте
Процедура ИзБуфера(Команда)
	Если ТекущийЭлемент = Элементы.ТекстКода ИЛИ ТекущийЭлемент = Элементы.ТекстЗапроса Тогда
		ТекущийЭлемент.ВыделенныйТекст = Строка(Буфер);
	ИначеЕсли ТекущийЭлемент = Элементы.ТабЗначений ИЛИ ТекущийЭлемент = Элементы.ДопТаблица ИЛИ ТекущийЭлемент = Элементы.НастройкиЧАКО
			ИЛИ ТекущийЭлемент = Элементы.Параметры_ ИЛИ ТекущийЭлемент = Элементы.Настройки_Значение Тогда
		ИмяКолонки = ПолучитьИмяКолонкиДанных(ТекущийЭлемент.ТекущийЭлемент.Имя);
		ТекущийЭлемент.ТекущиеДанные[ИмяКолонки] = Буфер;
		//ТекущийЭлемент.ТекущаяСтрока[ТекущийЭлемент.ТекущийЭлемент.Имя] = Объект.Буфер;
	ИначеЕсли ТекущийЭлемент = Элементы.ТабДокумент Тогда
		ТекОбласть = Элементы.ТабДокумент.ТекущаяОбласть;
		Если ТипЗнч(Буфер) = Тип("Строка") Тогда
			ТекОбласть.Текст = Буфер;
		ИначеЕсли ТипЗнч(Буфер) = Тип("Картинка") Тогда
			ТабДокумент.Рисунки.Добавить().Картинка = Буфер;
		Иначе
			ТекОбласть.СодержитЗначение = Истина;
			ТекОбласть.Значение = Буфер;
		КонецЕсли; 
	ИначеЕсли ТекущийЭлемент = Элементы.Предмет Тогда
		Предмет = Буфер;
	ИначеЕсли ТекущийЭлемент = Элементы.Файл_ Тогда
		//Файл_ = Строка(Объект.Буфер);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область НАСТРОЙКИ
	
&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	НачатьПомещениеФайлаНаСервер(Новый ОписаниеОповещения("ПрименитьНастройкиИзФайла", ЭтотОбъект),,,, ПутьДляСохранения, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройки_Кнопа(Команда)
	МенюНастройкиИКомандыВРеквизиты("СБРОСИТЬ",,,,, Элементы.Настройки_.ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиПользователя(Команда)
	МенюНастройкиИКомандыВРеквизиты("СБРОСИТЬ",,,, Пользователь_, ИмяНастройки);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущиеНастройки(Команда)
	ОчиститьТекНастройкиНаСервере();
	ОтключитьОбработчикОжидания("СохранитьВсеТекущиеНастройки");
	ИнтервалАвтосохраненияВСекундах = 9999999999;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	ПараметрыФормы = Новый Структура("КудаСохранять,РежимНастроек", "#Файл", Истина);
	ОткрытьФорму("ВнешняяОбработка.КонсольДанных30.Форма.УФормаСохраненияКоманды", ПараметрыФормы, ЭтотОбъект, 25);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПоИмени(Команда)
	ПараметрыФормы = Новый Структура("КудаСохранять,РежимНастроек,ИмяКоманды", ИмяНастройки, Истина, ИмяНастройки);
	ОткрытьФорму("ВнешняяОбработка.КонсольДанных30.Форма.УФормаСохраненияКоманды", ПараметрыФормы, ЭтотОбъект, 25);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущиеНастройки(Команда)
	СохранитьВсеТекущиеНастройки();
КонецПроцедуры

#КонецОбласти

#Область РЕДАКТИРОВАНИЕ_РЕКВИЗИТОВ
	
&НаКлиенте
Процедура ПредметОткрыть(Команда)
	ПредметОткрытьНаСервере();
	ОбновитьОтображениеДанных(Элементы.ТабЗначений);
КонецПроцедуры

&НаКлиенте
Процедура ПредметОткрытьТЧ(Команда)
	ПредметОткрытьТЧНаСервере(Элементы.ТабЗначений.ТекущиеДанные.ИмяРеквизита);
	ОбновитьОтображениеДанных(Элементы.ДопТаблица);
КонецПроцедуры

&НаКлиенте
Процедура ПредметСохранить(Команда)
	ПредметСохранитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПредметСохранитьТЧ(Команда)
	ИмяТЧ = Элементы.ТабЗначений.ТекущиеДанные.ИмяРеквизита;
	ПоказатьВопрос(Новый ОписаниеОповещения("СохранитьПредметПослеПодтверждения", ЭтотОбъект, Новый Структура("ИмяТЧ", ИмяТЧ)),
			"Сохранить табчасть " + ИмяТЧ + "? (будет сохранена в базу только ТЧ)", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

#КонецОбласти

#Область ЧАКО
	
&НаКлиенте
Процедура НастроитьЧАКО(Команда)
	//!!!!
КонецПроцедуры

&НаКлиенте
Процедура ЧАКО1(Команда)
	НомерЧАКО = Прав(Команда.Имя, 1);
	СтрокиЧАКО = НастройкиЧАКО.НайтиСтроки(Новый Структура("Номер", НомерЧАКО));
	Если СтрокиЧАКО.Количество() Тогда
		ТекСтрока = СтрокиЧАКО[0];
		ВыполнитьКомандуЭтойФормы(ТекСтрока.Команда);
		Если ЗначениеЗаполнено(ТекСтрока.ТекстКоманды) Тогда
			ВыполнитьКодСНастройками(ТекСтрока.ТекстКоманды);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ВЫЗОВ_ИЗ_ГЕНЕРИРУЕМЫХ_ПАНЕЛЕЙ
	
#Область ПАНЕЛЬ_НАД_КОДОМ

&НаКлиенте
Процедура ВставитьИзКонфы_Выполнить()
	ВставитьИзДерева("ТекстКода");
КонецПроцедуры

// Открывает меню дерева команд
&НаКлиенте
Процедура ВыполнитьИзДерева()
	СПараметры = НовыеПараметрыФормыДерева();
	СПараметры.Вставить("АдресДерева", АдресДерева_КомандДляФормы());
	СПараметры.Вставить("КомандыФормы",
			Новый Структура("Добавить,Удалить",
				Новый Структура("Заголовок,Код,Картинка,Подсказка", "Добавить команду", "ВладелецФормы.ДобавитьКоманду(Элементы.Деревяшка.ТекущиеДанные.ИД_); Закрыть()",
					БиблиотекаКартинок.ДобавитьЭлементСписка, "Добавить команду перед текущей"),
				Новый Структура("Заголовок,Код,Картинка,Подсказка", "Удалить команду", "ВладелецФормы.УдалитьКоманду(Элементы.Деревяшка.ТекущиеДанные.ИД_); Закрыть()",
					БиблиотекаКартинок.УдалитьЭлементСписка, "Удалить эту команду")));
	СПараметры.Вставить("ОтображатьРеквизиты", "-ХотКей,Картинка,Команда");
	СПараметры.Вставить("ТолькоПросмотрДерева", Истина);
	СПараметры.Вставить("РежимВыбораДерева", Истина);
	ОткрытьФорму("ВнешняяОбработка.КонсольДанных30.Форма.ВыборИзДерева", СПараметры, 
			ЭтотОбъект, ЭтотОбъект,,, Новый ОписаниеОповещения("ВыполнитьВыбраннуюКоманду", ЭтотОбъект));
	ПоместитьВХранилищеФормы(Неопределено, СПараметры.АдресДерева);
КонецПроцедуры // ВыполнитьИзДерева

&НаКлиенте
Процедура БиблиотекаФункций()
	АдресБФ = ПоместитьВХранилищеФормы(Неопределено);
	Код = "НоваяДоска = ДеревоМетодовМодуля(ПолучитьМакет(""МодульКлиент"").ПолучитьТекст());
			|НоваяДоска = ДеревоМетодовМодуля(ПолучитьМакет(""МодульСервер"").ПолучитьТекст(),,,, НоваяДоска);
			|НоваяДоска = ДеревоМетодовМодуля(ПолучитьМакет(""МодульВС"").ПолучитьТекст(),,,, НоваяДоска);
			|НоваяДоска = ДеревоМетодовМодуля(ПолучитьМакет(""МодульКС"").ПолучитьТекст(),,,, НоваяДоска);
			|НоваяДоска = ДеревоМетодовМодуля(ПолучитьМакет(""МодульПовтИсп"").ПолучитьТекст(),,,, НоваяДоска);
			|АдресДерева = ПоместитьВоВременноеХранилище(НоваяДоска, АдресДерева);
			|";
	СтрОтвет = Новый Структура("АдресДерева", АдресБФ);
	ВызватьАлгоритмОбъект(Код, СтрОтвет);
	СПараметры = НовыеПараметрыФормыДерева();
	СПараметры.Вставить("АдресДерева", СтрОтвет.АдресДерева);
	СПараметры.Вставить("ВозвращаемыеРеквизиты", "ПолноеОписание");
	СПараметры.Вставить("ВыборМногих", Истина);
	СПараметры.Вставить("ИмяКолонкиДерева", "Представление");
	//СПараметры.Вставить("ИмяКолонкиФлагов", "");
	//СПараметры.Вставить("КомандыФормы",Новый Структура("Имя1,ИмяN", Новый Структура("Заголовок,Код,Картинка,Подсказка"
	//СПараметры.Вставить("ОбработчикПриЗакрытии, "");
	//СПараметры.Вставить("ДФС_Обработка", Объект);
	СПараметры.Вставить("ОтображатьРеквизиты", "-ПолноеОписание,Представление,Описание");
	ТекФорма = ЭтотОбъект;
	ОткрытьФорму("ВнешняяОбработка.КонсольДанных30.Форма.ВыборИзДерева", СПараметры, 
			ТекФорма, ТекФорма,,, Новый ОписаниеОповещения("ВставитьРезультатВТекст", ТекФорма));
	ПоместитьВХранилищеФормы(Неопределено, СПараметры.АдресДерева);
КонецПроцедуры

// Возвращает закомментированный текст
// Параметры:
//  ТекстКода  - Строка - изменяемый текст
//  Закомментировать  - Булево - Истина - раскомментировать, Ложь - закомментировать
// Возвращаемое значение:
//   Строка   - Закомментированный или раскомментированный текст
&НаКлиенте
Функция Комментарий(ТекстКода, Закомментировать = Истина)
	Возврат КомментарийНаСервере(ТекстКода, Закомментировать)
КонецФункции // Комментарий

&НаКлиенте
Процедура ЗаполнитьПараметрыПоКоду(Какому = "")
	ТекЭлемент = ТекущийЭлемент;
	Если Какому = "Д" Тогда
		ВесьТекст = ТекстЗапроса;
	ИначеЕсли Какому = "О" Тогда
		ВесьТекст = ТекстКода;
	ИначеЕсли ТекЭлемент = Элементы.ТекстЗапроса Тогда
		ВесьТекст = ТекстЗапроса;
	Иначе
		ВесьТекст = ТекстКода;
	КонецЕсли;
	ВызватьАлгоритмОбъект("ДополнитьПараметрыПоКоду(ВесьТекст, СПарам)", Новый Структура("ВесьТекст", ВесьТекст));
КонецПроцедуры

//RUN! - см раздел Выполнение

&НаКлиенте
Процедура КомандаДиректива()
	ТекФорма = ЭтотОбъект;
	ТекЭл = ТекущийЭлемент;
	ДляВызова = Новый Структура("Результат", Неопределено);
	ВызватьАлгоритмОбъект("Результат = СписокДиректив()", ДляВызова, Ложь);
	ДляВызова.Результат.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВставитьРезультатВТекст", ЭтотОбъект , Новый Структура("ТекЭл", ТекущийЭлемент)));
КонецПроцедуры

//Алгоритм вставляется кодом из макета

#КонецОбласти

#Область ПАНЕЛЬ_ЗАПРОСА
	
&НаКлиенте
Процедура ВызватьКонструкторЗапроса()
	Если Элементы.ТекстЗапроса.ВыделенныйТекст <> "" Тогда
		НовыйКЗ = Новый КонструкторЗапроса(Элементы.ТекстЗапроса.ВыделенныйТекст);
	ИначеЕсли ТекстЗапроса = "" Тогда
		НовыйКЗ = Новый КонструкторЗапроса();
	Иначе
		НовыйКЗ = Новый КонструкторЗапроса(ТекстЗапроса);
	КонецЕсли; 
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		НовыйКЗ.АвтоДобавлениеПредставлений = Ложь;
		НовыйКЗ.РежимКомпоновкиДанных = Ложь;
	#КонецЕсли
	НовыйКЗ.Показать(Новый ОписаниеОповещения("КЗПослеЗакрытия", ЭтотОбъект, Новый Структура));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПоЗапросу()
	ВызватьАлгоритмОбъект("ДополнитьПараметрыПоЗапросу(Запрос_, СПарам)");
КонецПроцедуры
 
&НаКлиенте
Процедура ВыполнитьЗапрос()
	Попытка
		ВызватьАлгоритмОбъект("Старт = ТекущаяУниверсальнаяДатаВМиллисекундах();
				|ТабЗначений = Запрос_.Выполнить().Выгрузить();
				|Сек = (ТекущаяУниверсальнаяДатаВМиллисекундах() - Старт) / 1000;
				|Сообщить(""Выполнение запроса "" + Сек + "" сек., записей = "" + ТабЗначений.Количество())");
	Исключение
		ООШ = ОписаниеОшибки();
		Если СтрНайти(ООШ, "не был освобожден менеджер временных таблиц") = 0 Тогда
			Сообщить("Не удалось выпонить запрос по причине: " + ООШ);
		Иначе
			Сообщить("Менеджер ВТ остался на сервере, в нём есть таблицы, но у них только ПолноеИмя - содержимое пропадает. Кто бы подсказал, как передать МВТ из первого обращения к серверу во второе? 1С этому противится!");
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМВТ()
	КнопаИМВТ = Элементы.КПЗапроса.ПодчиненныеЭлементы.Найти("ФлагИспользоватьМВТ");
	Если КнопаИМВТ <> Неопределено Тогда
		КнопаИМВТ.Пометка = НЕ КнопаИМВТ.Пометка;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВывестиВТвТЗ()
	СписокВТ = Новый СписокЗначений;
	#Область СПИСОК_ВТ
		ПозСледЗапроса = 6;
		ПозПом = 6;
		ПозУн = 6;
		ИндексЗапроса = 0;
		ТекстВрегЗ = ВРег(ТекстЗапроса);
		Длина_ = СтрДлина(ТекстЗапроса);
		ПересчитатьУничтожить = Истина;
		ПересчитатьПоместить = Истина;
		ВПакете = 0;
		МаксИндекс = 0;
		Пока ПозСледЗапроса > 0 Цикл
			ПозСледЗапроса = СтрНайти(ТекстВрегЗ, ";",, ПозСледЗапроса + 1);
			Если ПересчитатьПоместить Тогда
				ПозПом = СтрНайти(ТекстВрегЗ, "ПОМЕСТИТЬ",, ПозПом + 1);
				ПересчитатьПоместить = Ложь;
			КонецЕсли;
			Если ПозПом > 0 И (ПозПом < ПозСледЗапроса ИЛИ ПозСледЗапроса = 0) Тогда
				ПозПом = ПозПом + 8;
				ТекСимвол = " ";
				Метка = ПозПом;
				Пока ПозПом < Длина_ И НЕ ЗначениеЗаполнено(ТекСимвол) Цикл
					ПозПом = ПозПом + 1;
					ТекСимвол = Сред(ТекстЗапроса, ПозПом, 1);
				КонецЦикла;
				Если ПозПом - Метка > 1 Тогда
					//Хотя бы одна пустышка
					ТекИмя = "";
					Пока ЗначениеЗаполнено(ТекСимвол) И ТекСимвол <> ";" Цикл
						ТекИмя = ТекИмя + ТекСимвол;
						ПозПом = ПозПом + 1;
						ТекСимвол = Сред(ТекстЗапроса, ПозПом, 1);
					КонецЦикла;
					Если ТекИмя <> "" Тогда
						СписокВТ.Добавить(ИндексЗапроса, ТекИмя);
					КонецЕсли;
				КонецЕсли;
				ПересчитатьПоместить = Истина;
			Иначе
				Если ПересчитатьУничтожить Тогда
					ПозУн = СтрНайти(ТекстВрегЗ, "УНИЧТОЖИТЬ",, ПозУн + 1);
				КонецЕсли;
				ПересчитатьУничтожить = ПозУН > 0 И (ПозУн < ПозСледЗапроса ИЛИ ПозСледЗапроса = 0);
				Если Не ПересчитатьУничтожить Тогда
					СписокВТ.Добавить(ИндексЗапроса, "ЗАПРОС ПАКЕТА #" + ИндексЗапроса);
					ВПакете = ВПакете + 1;
					МаксИндекс = ИндексЗапроса;
				КонецЕсли;
			КонецЕсли;
			ИндексЗапроса = ИндексЗапроса + 1;
		КонецЦикла;
	#КонецОбласти
	СписокВТ.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВывестиВыбраннуюВТвДопТЗ", ЭтотОбъект, Новый Структура("ВПакете,МаксИндекс", ВПакете, МаксИндекс)));
КонецПроцедуры

//Комментарии - см. панель кода

// Преобразует строку в текст запроса и обратно
// Параметры:
//  Направление  - Строка - Вид преобразования ("ВЗапрос", "ВКод"...)
&НаКлиенте
Процедура ПреобразоватьТекст(Направление)
	Если ТекущийЭлемент = Элементы.ТекстЗапроса Тогда
		Источник = ТекущийЭлемент;
		ИмяРекв = "ТекстЗапроса";
	Иначе
		Источник = Элементы.ТекстКода;
		ИмяРекв = "ТекстКода";
	КонецЕсли; 
	Текст_ = Источник.ВыделенныйТекст;
	НеВыделено = Текст_ = "";
	Если НеВыделено Тогда
		Текст_ = ЭтотОбъект[ИмяРекв];
	КонецЕсли;
	Результат = Неопределено;
	Прм = Новый Структура("Текст_, Результат", Текст_, "");
	Если Направление = "ВЗапрос" Тогда
		ВызватьАлгоритмОбъект("Результат = ЛитералВТекст(Текст_)", Прм);
	ИначеЕсли Направление = "ВКод" Тогда
		ВызватьАлгоритмОбъект("Результат = ТекстВЛитерал(Текст_)", Прм);
	КонецЕсли;
	Результат = Прм.Результат;
	Если Результат <> Неопределено Тогда
		Если НеВыделено Тогда
			ЭтотОбъект[ИмяРекв] = Результат;
		Иначе
			ВставитьТекстВЭлемент(Результат, Источник);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры //ПреобразоватьТекст 

&НаКлиенте
Процедура ВставитьОбъектКонфигурацииВЗапрос()
	ВставитьИзДерева("ТекстЗапроса");
КонецПроцедуры

// //Вставляет запрос из библиотеки
Процедура ВставитьЗапрос()
	//!!!!НЕ НАПИСАНА!!!!
КонецПроцедуры // ВставитьЗапрос

//Выполнение кода - см. панель кода

#КонецОбласти

#Область ПАНЕЛЬ_СКД
	
&НаКлиенте
Процедура ОткрытьКонструкторСКД()
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Если ЗначениеЗаполнено(АдресСКД) Тогда
			ТекСкД = ПолучитьИзВременногоХранилища(АдресСКД);
		КонецЕсли;
		Если ТекСКД = Неопределено Тогда
			ТекСКД = Новый СхемаКомпоновкиДанных;
		КонецЕсли;
		КСКД = Новый КонструкторСхемыКомпоновкиДанных(ТекСКД);
		//ТекСКД = ХСЗ.СКД; //а вот как сюда вставить вариант настроек 0 с заданными настройками - не знаю. Впрочем, он и так д.б. там...
		//КСКД.УстановитьСхему(ТекСКД);
		КСКД.Редактировать(ЭтотОбъект);
	#Иначе 	
		Сообщить("Доступно только в толстом клиенте!");
	#КонецЕсли 
КонецПроцедуры

&НаКлиенте
Процедура СКДвТЗ_()
	ВызватьАлгоритмОбъект("ТабЗначений = ТаблицаСКД(СКД, НастройкиСКД)");
	ОбновитьОтображениеДанных(Элементы.ТабЗначений);
КонецПроцедуры

&НаКлиенте
Процедура СКДвТД_()
	СКДвТДнаСервере();
	ОбновитьОтображениеДанных(Элементы.ТабДокумент);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВЫЗОВ_ИЗ_МЕНЮ_И_МАКЕТА
	
// Вставляет заданный текст в выделенный текст заданного элемента
// Параметры:
//  ТекстКВставке, Элемент  - Строка - Текст, который надо вставить
&НаКлиенте
Процедура ВставитьТекстВЭлемент(ТекстКВставке, Элемент = Неопределено)
	Куда = ?(Элемент = Неопределено, ?(ТекущийЭлемент = Элементы.ТекстЗапроса, ТекущийЭлемент, Элементы.ТекстКода), Элементы[Элемент]);
	Если Куда.Высота < 2 Тогда
		Дл_ТР = СтрДлина(Куда.ТекстРедактирования);
		Если Дл_ТР > 0 Тогда
			Куда.УстановитьГраницыВыделения(1, Дл_ТР + 1);
		КонецЕсли;
	КонецЕсли;
	Куда.ВыделенныйТекст = ТекстКВставке
КонецПроцедуры // ВставитьТекстВЭлемент

#КонецОбласти

#Область КЛИЕНТСКИЕ_ПРОДОЛЖЕНИЯ

//Вызывает диалог вставки значенияия, выбранного из дерева.
//Параметры:
//	НазначениеРезультата - строка - режим диалога:
//			* "ТекстКода" - выбор объекта конфигурации для вставки в код;
//			* "ТекстЗапроса" - выбор объекта конфигурации для вставки в хапрос;
//			* "ИзМодуля" - Выбор процедуры из макета - модуля для вставки в код
&НаКлиенте
Процедура ВставитьИзДерева(НазначениеРезультата)
	СПараметры = НовыеПараметрыФормыДерева();
	ПостроитьМД_ДляВыбора();
	СПараметры.Вставить("АдресДерева", АдресДерева_МД_дляВыбора);
	СПараметры.Вставить("ТолькоПросмотрДерева", Истина);
	СПараметры.Вставить("РежимВыбораДерева", Истина);
	СПараметры.Вставить("ОтображатьРеквизиты", "-Имя,Команда");
	СПараметры.Вставить("ВозвращаемыеРеквизиты", ?(НазначениеРезультата = "ТекстЗапроса", "ТекстДляЗапроса", "ТекстДляКода"));
	СПараметры.Вставить("ВыборМногих", Истина);
	СПараметры.Вставить("ОбработчикВыбора", "
			|ТекВетка = ТекСтрока;
			|Путь = """";
			|Пока ТекВетка <> Неопределено Цикл
			|	Путь = Путь + Символы.ПС + ТекВетка.Команда;
			|	ТекВетка = ТекВетка.ПолучитьРодителя();
			|КонецЦикла;
			|СтрокиДМД = ВладелецФормы.ПрочитатьМДсСервера(Путь);
			|Если СтрокиДМД <> Неопределено Тогда
			|	ВыборСделан = СтрокиДМД.Количество() = 0;
			|	КСтрок = ТекСтрока.ПолучитьЭлементы();
			|	Для каждого СтрокаМД Из СтрокиДМД Цикл
			|		ЗаполнитьЗначенияСвойств(КСтрок.Добавить(), СтрокаМД);
			|	КонецЦикла;
			|КонецЕсли;");
	ОткрытьФорму("ВнешняяОбработка.КонсольДанных30.Форма.ВыборИзДерева", СПараметры, 
			ЭтотОбъект, ЭтотОбъект,,, Новый ОписаниеОповещения("ВставитьРезультатВТекст", ЭтотОбъект));
	
	
	
	
	
	//ОткрытьФорму("ВнешняяОбработка.КонсольДанных30.Форма.УФормаВыбораИзДерева",
	//		Новый Структура("НазначениеРезультата,АдресДерева", НазначениеРезультата, АдресДереваМД), ЭтотОбъект, "Конфа",,,
	//		Новый ОписаниеОповещения("ВставитьРезультатВТекст", ЭтотОбъект,
	//			Новый Структура("ИмяЭлементаКуда", НазначениеРезультата)));//?(ТекущийЭлемент = Элементы.ТекстЗапроса, "ТекстЗапроса", "ТекстКода")
КонецПроцедуры

// Вставляет в текст результат выбора из формы списка значений или дерева - строку или массив строк
// Параметры:
//  Результат  - Структура - Результат обрабочика, ключи Адрес - адрес хранилища со структурой изменённых команд, и ИмяКоманды.
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика = Неопределено
&НаКлиенте
Процедура ВставитьРезультатВТекст(Результат, СтруктураПараметров = Неопределено) Экспорт
	Если Результат = "" И ?(ТипЗнч(СтруктураПараметров) = Тип("Структура"), СтруктураПараметров.Свойство("Ошибка__ИнфоОбОшибке"), Ложь) Тогда
		Сообщить("ОШИБКА:" + СтруктураПараметров.Ошибка__ИнфоОбОшибке.Описание
				+ Символы.ПС + "(" + СтруктураПараметров.Ошибка__ИнфоОбОшибке.ИсходнаяСтрока + ")"
				+ Символы.ПС + "в строке " + СтруктураПараметров.Ошибка__ИнфоОбОшибке.НомерСтроки + " модуля " + СтруктураПараметров.Ошибка__ИнфоОбОшибке.ИмяМодуля);
	ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда
		Если СтруктураПараметров.Свойство("ИмяЭлементаКуда") Тогда
			ВставитьТекстВЭлемент(СтрСоединить(Результат, Символы.ПС + Символы.ПС), СтруктураПараметров.ИмяЭлементаКуда);
		Иначе
			ВставитьТекстВЭлемент(СтрСоединить(Результат, Символы.ПС + Символы.ПС));
		КонецЕсли;
	ИначеЕсли ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
		ВставитьТекстВЭлемент(Результат.Значение, СтруктураПараметров.ТекЭл);
	ИначеЕсли Результат <> Неопределено Тогда
		Если ЗначениеЗаполнено(Результат.Текст) Тогда
			ВставитьТекстВЭлемент(Результат.Текст, Элементы[СтруктураПараметров.ИмяЭлементаКуда]);
		КонецЕсли; 
		//Если ЗначениеЗаполнено(Результат.АдресДерева) Тогда
		//	ПересохранитьНаСервере(АдресДереваМД, Результат.АдресДерева);
		//КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ВыполнитьВыбраннуюКоманду

// Формирует запрос и выводит его таблицу в допТаблицу, а результат - в основную
// Параметры:
//  Результат  - Элемент списка значений/Неопределено - Результат обрабочика
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика
&НаКлиенте
Процедура ВывестиВыбраннуюВТвДопТЗ(Результат, СтруктураПараметров = Неопределено) Экспорт
    Если Результат <> Неопределено Тогда
		КВыполнению = "Старт = ТекущаяУниверсальнаяДатаВМиллисекундах(); мРЗ = Запрос_.ВыполнитьПакетСПромежуточнымиДанными();
				|Сек = (ТекущаяУниверсальнаяДатаВМиллисекундах() - Старт) / 1000; ТМП = мРЗ[" + Результат.Значение + "]; Колво2 = 0; Колво1 = 0;
				|Если ТМП <> Неопределено Тогда
				| 	ДопТаблица = ТМП.Выгрузить();
				|	Колво2 = ДопТаблица.Количество();
				|КонецЕсли; ТМП = ";
		Финиш = Символы.ПС + "
				|Если ТМП <> Неопределено Тогда
				| 	ТабЗначений = ТМП.Выгрузить();
				|	Колво1 = ТабЗначений.Количество();
				|КонецЕсли;
				|Сообщить(""Выполнение запроса "" + Сек + "" сек., записей осн = "" + Колво1 + ""; доп = "" + Колво2)";
		Если СтруктураПараметров.ВПакете = 0 Тогда
			Серединка = "мРЗ[мРЗ.ВГраница()];";
		Иначе
			Серединка = "мРЗ[" + СтруктураПараметров.МаксИндекс + "];";
		КонецЕсли;
		КВыполнению = КВыполнению + Серединка + Финиш;
		ВызватьАлгоритмОбъект(КВыполнению);
	КонецЕсли;
КонецПроцедуры // ВывестиВыбраннуюВТвДопТЗ

// Выполняет полученную выбранную команду дерева
// Параметры:
//  Результат  - Структура - Результат обрабочика, ключи Адрес - адрес хранилища со структурой изменённых команд, и ИмяКоманды.
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика = Неопределено
&НаКлиенте
Процедура ВыполнитьВыбраннуюКоманду(Результат, СтруктураПараметров = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
	ИначеЕсли Результат.Количество() Тогда
		ВыполнитьКомандуЭтойФормы(Новый Структура("Имя", "Команда___" + Результат[0]));
	КонецЕсли; 
КонецПроцедуры // ВыполнитьВыбраннуюКоманду

&НаКлиенте
Процедура КЗПослеЗакрытия(Текст_, ДопПараметры) Экспорт
	Если Текст_ <> Неопределено Тогда
		Если Элементы.ТекстЗапроса.ВыделенныйТекст = "" Тогда
			ТекстЗапроса = Текст_;
		Иначе
			Элементы.ТекстЗапроса.ВыделенныйТекст = Текст_;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

// Применяет загруженные из файла настройки
// Параметры:
//  Результат  - ОписаниеПомещенногоФайла - Результат обрабочика
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика
&НаКлиенте
Процедура ПрименитьНастройкиИзФайла(Результат, СтруктураПараметров = Неопределено) Экспорт
    Если ?(Результат = Неопределено, Ложь, НЕ Результат.ПомещениеФайлаОтменено) Тогда
		ПрочитатьНастройкиИЗапихнутьВХранилище(Результат.Адрес);
	КонецЕсли;
КонецПроцедуры // ПрименитьНастройкиИзФайла

 // Сохраняет указанную табчасть Предмета
// Параметры:
//  Результат  - КодВозвратаДиалога - Результат обрабочика
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика
&НаКлиенте
Процедура СохранитьПредметПослеПодтверждения(Результат, СтруктураПараметров = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Код = "
			|ПредметОбъект = Предмет.ПолучитьОбъект();
			|ПредметОбъект." + СтруктураПараметров.ИмяТЧ + ".Загрузить(ДопТаблица);
			|ПредметОбъект.ОбменДанными.Загрузка = Истина;
			|ПредметОбъект.ДополнительныеСвойства.Вставить(""ОтключитьМеханизмРегистрацииОбъектов"", Истина);
			|ПредметОбъект.Записать();";
		ВызватьАлгоритмОбъект(Код);
		Сообщить("ПРЕДМЕТ записан ок");
		ТекущийЭлемент = Элементы.ТабЗначений;
	КонецЕсли; 
КонецПроцедуры // СохранитьПредметПослеПодтверждения

#КонецОбласти 

#Область СЕРВЕРНЫЕ_ЧАСТИ

&НаСервере
Функция КомментарийНаСервере(ТекстКода, Закомментировать)
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	Возврат Настоящий.Комментарий(ТекстКода, Закомментировать)
КонецФункции // Комментарий

// Очищает сохранённые текущие настройки и отключает флаг автосохранения
&НаСервере
Процедура ОчиститьТекНастройкиНаСервере()
	Имя_Пользователя = ИмяПользователя();
	ХранилищеОбщихНастроек.Сохранить("КонсольДанных_____", "Команды", Неопределено, Имя_Пользователя);
	ХранилищеОбщихНастроек.Сохранить("КонсольДанных_____", "Меню", Неопределено, Имя_Пользователя);
	ХранилищеОбщихНастроек.Сохранить("КонсольДанных_____", "Настройки", Неопределено, Имя_Пользователя);
КонецПроцедуры // ОчиститьТекНастройкиНаСервере

&НаСервере
Процедура ПредметОткрытьНаСервере()
	Код = "
		|СтруктураРеквизитов = СформироватьСтруктуруВсехРеквизитов(Предмет, Истина, Истина);
		|ТабЗначений = Новый ТаблицаЗначений;
		|ЭтиКолонки = ТабЗначений.Колонки;
		|ЭтиКолонки.Добавить(""ИмяРеквизита"", Новый ОписаниеТипов(""Строка"",, Новый КвалификаторыСтроки(120, ДопустимаяДлина.Переменная)));
		|ЭтиКолонки.Добавить(""ЗначениеРеквизита"");
		|МассивНедопустимыхТипов = Новый Массив;
		|МассивНедопустимыхТипов.Добавить(Тип(""ХранилищеЗначения""));
		|Для каждого КиЗ Из СтруктураРеквизитов Цикл
		|	ЗаполнитьЗначенияСвойств(ТабЗначений.Добавить(),
		|			Новый Структура(""ИмяРеквизита,ЗначениеРеквизита"", КиЗ.Ключ,
		|			?(МассивНедопустимыхТипов.Найти(ТипЗнч(КиЗ.Значение)) = Неопределено, КиЗ.Значение, ""###"" + СокрЛП(КиЗ.Значение))));
		|КонецЦикла;";
	ВызватьАлгоритмОбъект(Код);
КонецПроцедуры

&НаСервере
Процедура ПредметОткрытьТЧНаСервере(ИмяТЧ)
	Код = "ДопТаблица = Предмет." + ИмяТЧ + ".Выгрузить()";
	ВызватьАлгоритмОбъект(Код);
КонецПроцедуры

&НаСервере
Процедура ПредметСохранитьНаСервере()
	Код = "ПредметОбъект = Предмет.ПолучитьОбъект();
		|Для каждого Строчка Из ТабЗначений Цикл
		|	Если Лев(Строчка.ЗначениеРеквизита, 3) = ""###"" Тогда
		|		Сообщить(""Реквизит "" + Строчка.ИмяРеквизита + "" не был записан!"");
		|	Иначе
		|		Попытка
		|			ПредметОбъект[Строчка.ИмяРеквизита] = Строчка.ЗначениеРеквизита;
		|			Сообщить(""Записан "" + Строчка.ИмяРеквизита);
		|		Исключение
		|			Сообщить(""Реквизит "" + Строчка.ИмяРеквизита + "" не был записан!"");
		|		КонецПопытки;
		|	КонецЕсли; 
		|КонецЦикла;
		|ПредметОбъект.ОбменДанными.Загрузка = Истина;
		|ПредметОбъект.ДополнительныеСвойства.Вставить(""ОтключитьМеханизмРегистрацииОбъектов"", Истина);
		|ПредметОбъект.Записать();";
	ВызватьАлгоритмОбъект(Код);
	Сообщить("ПРЕДМЕТ записан ок");
КонецПроцедуры

// Получает сохранённую СКД, выполняет и результат выводит в табличный документ.
&НаСервере
Процедура СКДвТДнаСервере()
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);//!!! Этого недостаточно!СоздатьИЗаполнитьНастоящийОбъект();
	Настоящий.СКДвТДнаСервере(ТабДокумент, ПолучитьИзВременногоХранилища(АдресСКД), Настройки_СКД);
	//СохранитьНастоящийОбъект(Настоящий);
КонецПроцедуры // СКДвТДнаСервере

#КонецОбласти

#КонецОбласти //КОМАНДЫ

#Область СЛУЖЕБНЫЕ

#Область ВСПОМОГАТЕЛЬНЫЕ_ОБЩЕГО_НАЗНАЧЕНИЯ
	
// Читает асинхронно строку из файла и вызывает заданный обработчик
// Параметры:
//  Результат  - Булево - Результат обрабочика проверки существования файла
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика. Содержит параметры Обработчик___ и ИмяФайла___
&НаКлиенте
Процедура АсинхронноеЧтениеСтрокиИзФайла(Результат, СтруктураПараметров = Неопределено) Экспорт
	Если Результат Тогда
		ЧтениеИзФайла = Новый ТекстовыйДокумент;
		СтруктураПараметров.Обработчик___.ДополнительныеПараметры.Вставить("Текст", ЧтениеИзФайла);
		ЧтениеИзФайла.НачатьЧтение(СтруктураПараметров.Обработчик___, СтруктураПараметров.ИмяФайла___);
	Иначе
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения(СтруктураПараметров.Обработчик___.ИмяПроцедуры + "_Н", СтруктураПараметров.Обработчик___.Модуль, СтруктураПараметров.Обработчик___.ДополнительныеПараметры), Неопределено); 
		//ВыполнитьОбработкуОповещения(СтруктураПараметров.Обработчик___, Неопределено);
	КонецЕсли; 
КонецПроцедуры // АсинхронноеЧтениеСтрокиИзФайла

&НаСервере
Функция ПолучитьИмяКолонкиДанных(ИмяЭлемента)
	РазобранноеИмя = СтрЗаменить(Элементы[ИмяЭлемента].ПутьКДанным, ".", Символы.ПС);
	Возврат СтрПолучитьСтроку(РазобранноеИмя, СтрЧислоСтрок(РазобранноеИмя))
КонецФункции // ПолучитьИмяКолонкиДанных(Поле)

// Читает в асинхронном режиме данные из файла и передаёт эти данные в заданный обработчик
// Параметры:
//  ИмяФайла	- Строка - Путь к файлу - источнику данных
//  Обработчик	- ОписаниеОповещения - Обработчик чтения строки из файла
&НаКлиенте
Процедура ПрочитатьСтрокуИзФайла(ИмяФайла, Обработчик)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Обработчик___", Обработчик);
	СтруктураПараметров.Вставить("ИмяФайла___", ИмяФайла);
	ЧтениеИзФайла = Новый Файл(ИмяФайла);
	ЧтениеИзФайла.НачатьПроверкуСуществования(Новый ОписаниеОповещения("АсинхронноеЧтениеСтрокиИзФайла", ЭтотОбъект, СтруктураПараметров));
КонецПроцедуры // ПрочитатьСтрокуИзФайла
 
#КонецОбласти

#Область ВЫПОЛНЕНИЕ
	
#Область ЗАПУСК_КОДА

// Может служить обработчиком ожидания и при этом запускает заданный алгоритм на клиенте этой формы по имени. В алгоритме будут доступны
//	переменные РезультатОповещения и ключи структуры, передаваемой при описании оповещения, в т.ч. ИмяАлгоритма
// Параметры:
//  РезультатОповещения  - Произвольный - Результат действия. Тип зависит от действия.
//  ПараметрыИзВызова  - Структура - Обязательные ключи "Алгоритмы" и "ИмяАлгоритма". Ключи структуры будут доступны в алгоритме как переменные.
&НаКлиенте
Процедура ВызватьАлгоритмОповещения(РезультатОповещения, ПараметрыИзВызова) Экспорт
	ПараметрыИзВызова.Вставить("РезультатОповещения", РезультатОповещения);
	ВызватьАлгоритмФорма(ПараметрыИзВызова.Алгоритмы[ПараметрыИзВызова.ИмяАлгоритма], ПараметрыИзВызова);
КонецПроцедуры // ВызватьАлгоритмОповещения
	
&НаКлиенте
Процедура ВызватьАлгоритмКлиент(Код, Прм = Неопределено, Подготовка = Истина) Экспорт
	Если Код <> "#КЛЮЧИ" Тогда
		Если Прм = Неопределено Тогда
			Прм = Новый Структура;
		КонецЕсли;
		Если Подготовка Тогда
			ФлагМВТ = Элементы.Найти("ФлагИспользоватьМВТ");
			Прм.Вставить("ИспользоватьМВТ", ?(ФлагМВТ <> Неопределено, ФлагМВТ.Пометка, Ложь));
			ЗаполнитьПараметрыВыполненияИзФормыК(Прм);
		КонецЕсли;
		Прм.Вставить("СПарам", ЗаполнитьСтруктуруПараметровК());
	КонецЕсли;
	Если Код = "#КЛЮЧИ" Тогда
		Прм.Вставить("Ключи_____", ФормаМодульКлиент.ВыполнитьМетодВОЛНА("ВОЛНА_ОбщегоНазначенияКС.СброситьСтруктуру(Прм)", Новый Структура("Прм", Прм), Истина));
	Иначе
		ФормаМодульКлиент.ВызватьАлгоритмКлиент(Код, Прм, Ложь);
		Если Подготовка Тогда
			ТекстЗапроса = Прм.ТекстЗапроса;
			ТекстКода = Прм.ТекстКода;
			//ТабДокумент = Прм.ТабДокумент;ТабЗначений ДопТаблица Предмет Буфер Настройки_СКД
			Если ФлагМВТ <> Неопределено Тогда
				ФлагМВТ.Пометка = Прм.ИспользоватьМВТ;
			КонецЕсли;
		КонецЕсли;
		ВыгрузитьСтруктуруПараметровК(Прм.СПарам);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВызватьАлгоритмОбъект(Код, Прм = Неопределено, Подготовка = Истина) Экспорт
	Если Прм = Неопределено Тогда
		Прм = Новый Структура;
	КонецЕсли;
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	АдресДляСтруктурыПараметров = ЗаполнитьСтруктуруПараметровС(Настоящий);
	Прм.Вставить("СПарам", ПолучитьИзВременногоХранилища(АдресДляСтруктурыПараметров));
	Если Подготовка Тогда
		ФлагМВТ = Элементы.Найти("ФлагИспользоватьМВТ");
		Настоящий.ИспользоватьМВТ = ?(ФлагМВТ <> Неопределено, ФлагМВТ.Пометка, Ложь);
		Прм.Вставить("Параметры_", Параметры_.Выгрузить());
		Прм.Вставить("ФормаЭтойОбработки", ЭтотОбъект);
		ЗаполнитьПараметрыВыполненияИзФормыС(Настоящий, Прм, Истина);
	КонецЕсли;
	
	Настоящий.ВызватьАлгоритмОбъект(Код, Прм, ?(Прм.Свойство("ДобавлятьПараметрыВКодНаОбъекте"), Прм.ДобавлятьПараметрыВКодНаОбъекте, Истина));
	
	РазместитьРезультатВыполненияВРеквизитыС(Настоящий, Истина, Прм, Настоящий.ИспользоватьМВТ, Подготовка, ФлагМВТ);
	Прм.Удалить("Параметры_");
	Прм.Удалить("ФормаЭтойОбработки");
КонецПроцедуры

&НаСервере
Процедура ВызватьАлгоритмСервер(Код, Прм = Неопределено, Подготовка = Истина) Экспорт
	Если Прм = Неопределено Тогда
		Прм = Новый Структура;
	КонецЕсли;
	Настоящий = Неопределено; ПроверитьНастоящий(Настоящий);
	АдресДляСтруктурыПараметров = ЗаполнитьСтруктуруПараметровС(Настоящий);
	Прм.Вставить("СПарам", ПолучитьИзВременногоХранилища(АдресДляСтруктурыПараметров));
	Если Подготовка Тогда
		ФлагМВТ = Элементы.Найти("ФлагИспользоватьМВТ");
		Прм.Вставить("ИспользоватьМВТ", ?(ФлагМВТ <> Неопределено, ФлагМВТ.Пометка, Ложь));
		ЗаполнитьПараметрыВыполненияИзФормыС(Настоящий, Прм);
	КонецЕсли;
	
	ВыполнениеКодаНаСервере(ДобавитьПараметрыВВыполняемыйКод(Код, Прм), Прм);
	
	РазместитьРезультатВыполненияВРеквизитыС(Настоящий,, Прм, Прм.ИспользоватьМВТ, Подготовка, ФлагМВТ);
КонецПроцедуры

&НаКлиенте
Процедура ВызватьАлгоритмФорма(Код, Прм = Неопределено, Подготовка = Истина, ТекстПараметр = "") Экспорт
	Если Прм = Неопределено Тогда
		Прм = Новый Структура;
	КонецЕсли;
	Если Подготовка Тогда
		ФлагМВТ = Элементы.Найти("ФлагИспользоватьМВТ");
		Если ФлагМВТ <> Неопределено Тогда
			Прм.Вставить("ИспользоватьМВТ", ФлагМВТ.Пометка);
		КонецЕсли;
		Прм.Вставить("ТекстПараметр", ТекстПараметр);
		Прм.Вставить("Алгоритмы", Объект.Алгоритмы);
		Прм.Вставить("ТабЗначений", ОснДФК);
		Прм.Вставить("ДопТаблица", ДопДФК);
		//ЗаполнитьПараметрыВыполненияИзФормыК(Прм);
	КонецЕсли;
	Прм.Вставить("СПарам", ЗаполнитьСтруктуруПараметровК());
	ВызватьАлгоритмКлиент("#КЛЮЧИ", Прм, Ложь);
	ВыполнениеКодаНаКлиенте(ДобавитьПараметрыВВыполняемыйКод(Код, Прм.Ключи_____), Прм);
	Если Подготовка Тогда
		//ЗаполнитьЗначенияСвойств(Это(), Прм, "ТекстЗапроса,ТекстКода,ТабДокумент,Предмет,Буфер");
		Если ФлагМВТ <> Неопределено Тогда
			ФлагМВТ.Пометка = Прм.ИспользоватьМВТ;
		КонецЕсли;
	КонецЕсли;
	ВыгрузитьСтруктуруПараметровК(Прм.СПарам);
КонецПроцедуры

//Выполнение кода - чистое.
&НаКлиенте
Функция ВыполнениеКодаНаКлиенте(Код, Прм) Экспорт
	Выполнить(Код);
КонецФункции

//Выполнение кода - чистое.
&НаСервере
Функция ВыполнениеКодаНаСервере(Код, Прм) Экспорт
	Выполнить(Код);
КонецФункции

// Выполняет код с разбором и подготовкой
// Параметры:
//  Код  - Строка - Текст кода
&НаКлиенте
Процедура ВыполнитьКодСНастройками(Код, Прм = Неопределено, ГдеВыполнять = "Объект", ИмяНастроек = "", Подготовка = Истина, ТекстПараметр = "")
	Если Прм = Неопределено Тогда
		Прм = Новый Структура;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяНастроек) Тогда
		стрТексты = ЗагрузитьНастройкиПоИмени("СБРОСИТЬ", ИмяНастроек);
		Если ЗначениеЗаполнено(стрТексты.ТекстЗапроса) Тогда
			ВставитьТекстВЭлемент(стрТексты.ТекстЗапроса, "ТекстЗапроса");
		КонецЕсли;
		Если ЗначениеЗаполнено(стрТексты.ТекстКода) Тогда
			ВставитьТекстВЭлемент(стрТексты.ТекстКода, "ТекстКода");
		КонецЕсли;
	КонецЕсли;
	мКоды = РазобратьТекстКода(Код, ГдеВыполнять);
	Объект.Алгоритмы = мКоды[0];
	//Прм.Вставить("Алгоритмы", мКоды[0]);
	Для ЁХХ = 1 По мКоды.ВГраница() Цикл
		Если мКоды[ЁХХ].Тип = "Клиент" Тогда
			ВызватьАлгоритмКлиент(мКоды[ЁХХ].Код, Прм, Подготовка);
		ИначеЕсли мКоды[ЁХХ].Тип = "Объект" Тогда
			ВызватьАлгоритмОбъект(мКоды[ЁХХ].Код, Прм, Подготовка);
		ИначеЕсли мКоды[ЁХХ].Тип = "Сервер" Тогда
			ВызватьАлгоритмСервер(мКоды[ЁХХ].Код, Прм, Подготовка);
		ИначеЕсли мКоды[ЁХХ].Тип = "Форма" Тогда
			ВызватьАлгоритмФорма(мКоды[ЁХХ].Код, Прм, Подготовка, ТекстПараметр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ВыполнениеСРазборомИПодготовкой

#КонецОбласти

#Область ЗАПУСК_КОМАНД_МЕНЮ_И_МАКЕТОВ
	
// Выполняет команду, сформулированную для меню этой формы в макете команд или в сохранённых командах
// Параметры:
//  Команда  - Команда - Выполняемая команда
&НаКлиенте
Процедура ВыполнитьКомандуЭтойФормы(Команда)
	//Выполнение сохранённой команды или получение параметров встроенной
	ТекИмя = Сред(Команда.Имя, 11); //В главных панелях элемент с тем же именем
	ВыполняемаяКоманда = "";
	Если КомандыСписок.Свойство(ТекИмя, ВыполняемаяКоманда) Тогда
		ВыполнитьКодСНастройками(ВыполняемаяКоманда.ТекстКоманды,, "Форма", Команда.Имя,, ВыполняемаяКоманда.ТекстПараметр);
		#Область ПОПОЛНИТЬ_ЧАКО
			Если НастройкиЧАКО.НайтиСтроки(Новый Структура("Команда", ВыполняемаяКоманда.Имя)).Количество() = 0 Тогда
				мЧАКО = Новый Массив;
				Для ЁХХ = 1 По 7 Цикл
					мПоИндексу = НастройкиЧАКО.НайтиСтроки(Новый Структура("Номер", "" + ЁХХ));
					Если мПоИндексу.Количество() = 0 Тогда
						Прервать;
					КонецЕсли;
					Если НЕ мПоИндексу[0].Фикс Тогда
						мЧАКО.Добавить(ЁХХ);
					КонецЕсли;
				КонецЦикла;
				Если ЁХХ < 8 Тогда
					мЧАКО.Добавить(ЁХХ);
				КонецЕсли;
				ВГраница = мЧАКО.ВГраница();
				Для ЁХХ = 1 По ВГраница Цикл
					Стр_Куда = НастройкиЧАКО.НайтиСтроки(Новый Структура("Номер", "" + мЧАКО[ВГраница - ЁХХ]));
					Для каждого Стр______Куда Из Стр_Куда Цикл
						Стр______Куда.Номер = мЧАКО[ВГраница - ЁХХ + 1];
					КонецЦикла;
					ЗаполнитьЗначенияСвойств(Элементы["ЧАКО" + мЧАКО[ВГраница - ЁХХ + 1]], Элементы["ЧАКО" + мЧАКО[ВГраница - ЁХХ]], "Картинка,Отображение");
					Элементы["ЧАКО" + мЧАКО[ВГраница - ЁХХ + 1]].РасширеннаяПодсказка.Заголовок = Элементы["ЧАКО" + мЧАКО[ВГраница - ЁХХ]].РасширеннаяПодсказка.Заголовок;
					Если Элементы["ЧАКО" + мЧАКО[ВГраница - ЁХХ]].Заголовок = "" + мЧАКО[ВГраница - ЁХХ] Тогда
						Элементы["ЧАКО" + мЧАКО[ВГраница - ЁХХ + 1]].Заголовок = "" +мЧАКО[ВГраница - ЁХХ + 1];
					Иначе
						Элементы["ЧАКО" + мЧАКО[ВГраница - ЁХХ + 1]].Заголовок = Элементы["ЧАКО" + мЧАКО[ВГраница - ЁХХ]].Заголовок;
					КонецЕсли;
				КонецЦикла;
				Если мЧАКО.Количество() Тогда
					ДанныеМеню = ДанныеМенюПоКоманде(ТекИмя, "ХотКей,Картинка");
					ЁХХ = мЧАКО[0];
					Стр_Куда = НастройкиЧАКО.НайтиСтроки(Новый Структура("Номер", "" + ЁХХ));
					Стр_Куда = ?(Стр_Куда.Количество(), Стр_Куда[0], НастройкиЧАКО.Добавить());
					Стр_Куда.Фикс = Ложь;
					Стр_Куда.Номер = "" + ЁХХ;
					Стр_Куда.Заголовок = ""; //Только вручную
					Стр_Куда.Команда = ВыполняемаяКоманда.Имя;
					Стр_Куда.Подсказка = ВыполняемаяКоманда.Заголовок;
					Стр_Куда.ТекстКоманды = "";
					Стр_Куда.ХотКей = ДанныеМеню.ХотКей;
					Стр_Куда.Рисунок = ДанныеМеню.Картинка;
					Кнопа = Элементы["ЧАКО" + ЁХХ];
					Если ДанныеМеню.Картинка <> Неопределено И ДанныеМеню.Картинка.Вид <> ВидКартинки.Абсолютная Тогда
						Кнопа.Картинка = ДанныеМеню.Картинка;
					КонецЕсли;
					Если Кнопа.Картинка.Вид = ВидКартинки.Пустая Тогда
						Кнопа.Отображение = ОтображениеКнопки.Текст;
					Иначе
						Кнопа.Отображение = ОтображениеКнопки.Картинка;
					КонецЕсли;
					Кнопа.Заголовок = "" + ЁХХ;
					Кнопа.РасширеннаяПодсказка.Заголовок = ВыполняемаяКоманда.Заголовок;
					ХотКей = Новый Структура("Результат,Хоткей", "", ДанныеМеню.Хоткей);
					ВызватьАлгоритмКлиент("Результат = ВыполнитьМетодВОЛНА(""ВОЛНА_ОбщегоНазначенияКС.СочетаниеКлавишПоСтроке(Хоткей)"", Новый Структура(""ХотКей"", ХотКей), Истина)", ХотКей, Ложь);
					Если ХотКей.Результат <> Неопределено Тогда
						Кнопа.СочетаниеКлавиш = ХотКей.Результат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		#КонецОбласти
	Иначе
		Сообщить("" + ТекИмя + ": Текущая команда не обнаружена в списке. Возможно, это подменю.");
	КонецЕсли;
КонецПроцедуры // ВыполнитьКомандуЭтойФормы

#КонецОбласти

#Область ЗАПУСК_МЕТОДОВ

// Выполняет библиотечный метод объекта
// Параметры:
//  ИмяМетода  - Строка - Имя вызываемого метода
//  Параметр01..25  - Произвольные - Параметры вызываемого метода
// Возвращаемое значение:
//   Произвольный   - Результат выполнения метода
&НаКлиенте
Функция ВызватьБиблиотечныйВС(ИмяМетода, Параметр01 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр02 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр03 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр04 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр05 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр06 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр07 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр08 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр09 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр10 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр11 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр12 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр13 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр14 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр15 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр16 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр17 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр18 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр19 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр20 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр21 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр22 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр23 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр24 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр25 = "НЕ____БЫЛ_____НАЗНАЧЕН")
	Результат = ВызватьССервераБиблиотечныйМетодОбъекта(ИмяМетода, Параметр01, Параметр02, Параметр03, Параметр04, Параметр05,
			Параметр06, Параметр07,  Параметр08, Параметр09, Параметр10, Параметр11, Параметр12, Параметр13, Параметр14, Параметр15, Параметр16, Параметр17,
			Параметр18, Параметр19, Параметр20, Параметр21, Параметр22, Параметр23, Параметр24, Параметр25);
	Возврат Результат
КонецФункции // ВызватьБиблиотечныйВС

// Выполняет библиотечный метод объекта
// Параметры:
//  ИмяМетода  - Строка - Имя вызываемого метода
//  Параметр01..25  - Произвольные - Параметры вызываемого метода
// Возвращаемое значение:
//   Произвольный   - Результат выполнения метода
&НаКлиенте
Функция ВызватьССервераБиблиотечныйМетодОбъекта(ИмяМетода, Параметр01, Параметр02, Параметр03, Параметр04, Параметр05,
			Параметр06, Параметр07,  Параметр08, Параметр09, Параметр10, Параметр11, Параметр12, Параметр13, Параметр14, Параметр15, Параметр16, Параметр17,
			Параметр18, Параметр19, Параметр20, Параметр21, Параметр22, Параметр23, Параметр24, Параметр25)
	Результат = Неопределено;
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	КВыполнению = "";//;
	Фрагмент = "";
	Для ЁХХ = 1 По 25 Цикл
		ИмяПараметра = "Параметр" + Прав("00" + ЁХХ, 2);
		ТекЗнч = Вычислить(ИмяПараметра);
		Если ТекЗнч = "НЕ____БЫЛ_____НАЗНАЧЕН" Тогда
			Фрагмент = Фрагмент + ",";
		Иначе
			КВыполнению = КВыполнению + Фрагмент + "," + ИмяПараметра;
		КонецЕсли;
	КонецЦикла;
	КВыполнению = "Настоящий." + ИмяМетода + "(" + Сред(КВыполнению, 2) + ")";
	Попытка
		Результат = Вычислить(КВыполнению);
	Исключение
		Выполнить(КВыполнению);
	КонецПопытки;
	Возврат Результат
КонецФункции // ВызватьБиблиотечныйВС

//Вспомогательная для УниверсальныйВызовМетодаИзТекста.
//Производит запуск кода в отдельной процедуре без лишних контекстов, кроме контекста формы, что надо учитывать при формировании ТекстКода
&НаКлиенте
Функция ВыполнитьКодИзТекстаСПараметрами(ТекстКода, Параметр01, Параметр02, Параметр03, Параметр04, Параметр05,
				Параметр06, Параметр07,  Параметр08, Параметр09, Параметр10, Параметр11, Параметр12, Параметр13, Параметр14, Параметр15, Параметр16, Параметр17,
				Параметр18, Параметр19, Параметр20, Параметр21, Параметр22, Параметр23, Параметр24, Параметр25)
	РезультатВыполненияВозвращаемый_КАК_Функцией = Неопределено;
	Выполнить(ТекстКода);
	Возврат РезультатВыполненияВозвращаемый_КАК_Функцией
КонецФункции

//УСТАРЕЛА Вспомогательная для ВыполнитьПоТекстуМетода.
//Производит запуск кода в отдельной процедуре без лишних контекстов, кроме контекста формы, что надо учитывать при формировании ТекстКода
&НаКлиенте
Функция ВыполнитьКодСПараметрами(ТекстКода, Структура_ПараметровПереданных)
	РезультатВыполненияВозвращаемый_КАК_Функцией = Неопределено;
	Выполнить(ТекстКода);
	Возврат РезультатВыполненияВозвращаемый_КАК_Функцией
КонецФункции

// Выполняет внутренний код метода из текста модуля и текста вызова с вычисленными параметрами
// Параметры:
//  ТекстВызова  - Строка - Текст вызова метода от имени модуля до закрывающей скобки включительно
//  СПрм  - Структура/Неопределено - Параметры вызова. По умолч. Неопределено.
// Возвращаемое значение:
//   Произвольный   - Результат вычисления. Для процедуры = Неопределено
&НаКлиенте
Функция ВыполнитьПоТекстуМетода(ТекстВызова, СПрм = Неопределено) Экспорт
	ПозТочки = СтрНайти(ТекстВызова, ".");
	ПозСкобки = СтрНайти(ТекстВызова, "(");
	ИмяМетода = ВРег(Сред(ТекстВызова, ПозТочки + 1, ПозСкобки - ПозТочки - 1));
	ДанныеМетода = ТрансляторКС[ИмяМетода];
	#Область УСТАРЕЛО
		//Если ДанныеМетода = Неопределено Тогда
		//	ПозМетода = 5;
		//	МодульВРег = ВРег(ТекстМодуля);
		//	ДлинаМодуля = СтрДлина(ТекстМодуля);
		//	ДлинаИмени = СтрДлина(ИмяМетода);
		//	Режим = "НОВ";
		//	ИменаПараметров = Новый Массив;
		//	ЗначенияПараметров = Новый Массив;
		//	Значи = Новый Массив;
		//	ТекстМетода = "";
		//	Пока ПозМетода > 0 Цикл
		//		ПозМетода = СтрНайти(МодульВРег, ИмяМетода,, ПозМетода + 1);
		//		ПозНепустой = ПозМетода - 1;
		//		#Область ПРОВЕРКА_ЗАГОЛОВКА
		//			Пока ПозНепустой > 7 И НЕ ЗначениеЗаполнено(Сред(МодульВРег, ПозНепустой, 1)) Цикл
		//				ПозНепустой = ПозНепустой - 1;
		//			КонецЦикла;
		//			ЭтоФункция = Сред(МодульВРег, ПозНепустой - 6, 7) = "ФУНКЦИЯ";
		//			Если ПозМетода - ПозНепустой > 1
		//					И (ЭтоФункция ИЛИ Сред(МодульВРег, ПозНепустой - 8, 9) = "ПРОЦЕДУРА")
		//					И Сред(МодульВРег, ПозМетода + ДлинаИмени, 1) = "(" Тогда
		//				#Область ПОИСК_ПАРАМЕТРОВ_И_ТЕКСТА_МЕТОДА
		//					ИмяПараметра = "";
		//					ЗначениеПараметра = "";
		//					ТекЗнач = Ложь;
		//					Для Поз = ПозМетода + ДлинаИмени + 1 По ДлинаМодуля Цикл
		//						ТекСимМод = Сред(ТекстМодуля, Поз, 1);//МодульВРег
		//						ТекСимвол = ВРег(ТекСимМод);
		//						Если Режим = "ИМЯ" Тогда
		//							Если ТекСимвол = "/" И Сред(МодульВРег, Поз, 4) = "//" Тогда
		//								Режим = "КОММЕНТ";
		//							ИначеЕсли ТекСимвол = "," Тогда
		//								ИменаПараметров.Добавить(ИмяПараметра);
		//								ЗначенияПараметров.Добавить("");
		//								Значи.Добавить(ТекЗнач);
		//								ИмяПараметра = "";
		//								ТекЗнач = Ложь;
		//								Режим = "НОВ";
		//							ИначеЕсли ТекСимвол = ")" Тогда
		//								ИменаПараметров.Добавить(ИмяПараметра);
		//								ЗначенияПараметров.Добавить("");
		//								Значи.Добавить(ТекЗнач);
		//								Режим = "МЕТОД";
		//								Если Сред(МодульВРег, Поз, 9) = ") ЭКСПОРТ" Тогда
		//									Поз = Поз + 8;
		//								ИначеЕсли Сред(МодульВРег, Поз, 10) = ")  ЭКСПОРТ" Тогда
		//									Поз = Поз + 9;
		//								КонецЕсли;
		//							ИначеЕсли ТекСимвол = """" Тогда
		//								Режим = "ТЕКСТ";
		//							ИначеЕсли НЕ ЗначениеЗаполнено(ТекСимвол) Тогда
		//								Режим = "ПОСЛЕ";
		//							Иначе
		//								ИмяПараметра = ИмяПараметра + ТекСимМод;
		//							КонецЕсли;
		//						ИначеЕсли Режим = "ПОСЛЕ" Тогда
		//							Если ТекСимвол = "/" И Сред(МодульВРег, Поз, 4) = "//" Тогда
		//								Режим = "КОММЕНТ";
		//							ИначеЕсли ТекСимвол = "," Тогда
		//								ИменаПараметров.Добавить(ИмяПараметра);
		//								ЗначенияПараметров.Добавить("");
		//								Значи.Добавить(ТекЗнач);
		//								ИмяПараметра = "";
		//								ТекЗнач = Ложь;
		//								Режим = "НОВ";
		//							ИначеЕсли ТекСимвол = ")" Тогда
		//								ИменаПараметров.Добавить(ИмяПараметра);
		//								ЗначенияПараметров.Добавить("");
		//								Значи.Добавить(ТекЗнач);
		//								Режим = "МЕТОД";
		//							ИначеЕсли ЗначениеЗаполнено(ТекСимвол) Тогда
		//								Режим = "ЗНАЧЕНИЕ";
		//							Иначе
		//								Режим = "ТЕКСТ";
		//							КонецЕсли;
		//						ИначеЕсли Режим = "ЗНАЧЕНИЕ" Тогда
		//							Если ТекСимвол = "," Тогда
		//								ИменаПараметров.Добавить(ИмяПараметра);
		//								ИмяПараметра = "";
		//								ЗначенияПараметров.Добавить(ЗначениеПараметра);
		//								ЗначениеПараметра = "";
		//								Значи.Добавить(ТекЗнач);
		//								ТекЗнач = Ложь;
		//								Режим = "НОВ";
		//							ИначеЕсли ТекСимвол = ")" Тогда
		//								ИменаПараметров.Добавить(ИмяПараметра);
		//								ЗначенияПараметров.Добавить(ЗначениеПараметра);
		//								Значи.Добавить(ТекЗнач);
		//								Режим = "МЕТОД";
		//								Если Сред(МодульВРег, Поз, 9) = ") ЭКСПОРТ" Тогда
		//									Поз = Поз + 8;
		//								ИначеЕсли Сред(МодульВРег, Поз, 10) = ")  ЭКСПОРТ" Тогда
		//									Поз = Поз + 9;
		//								КонецЕсли;
		//							//ИначеЕсли ЗначениеЗаполнено(ТекСимвол) Тогда
		//							//	ЗначениеПараметра = ЗначениеПараметра + ТекСимвол;
		//							Иначе
		//								ЗначениеПараметра = ЗначениеПараметра + ТекСимМод;
		//							КонецЕсли;
		//						ИначеЕсли Режим = "ТЕКСТ" Тогда
		//							Если ТекСимвол = """" Тогда
		//								Режим = ?(ЗначениеЗаполнено(ИмяПараметра), Режим = "ПОСЛЕ", Режим = "НОВ");
		//							КонецЕсли;
		//						ИначеЕсли Режим = "КОММЕНТ" Тогда
		//							Если ТекСимвол = Символы.ПС Тогда
		//								Режим = ?(ЗначениеЗаполнено(ИмяПараметра), Режим = "ПОСЛЕ", Режим = "НОВ");
		//							КонецЕсли;
		//						ИначеЕсли Режим = "НОВ" Тогда
		//							Если ТекСимвол = "З" И Сред(МодульВРег, Поз, 4) = "ЗНАЧ" И НЕ ЗначениеЗаполнено(Сред(МодульВРег, Поз + 4, 1)) Тогда
		//								Поз = Поз + 4;
		//								ТекЗнач = Истина;
		//							ИначеЕсли ТекСимвол = "/" И Сред(МодульВРег, Поз, 2) = "//" Тогда
		//								Режим = "КОММЕНТ";
		//							ИначеЕсли ТекСимвол = "," Тогда
		//								ИменаПараметров.Добавить(ИмяПараметра);
		//								ИмяПараметра = "";
		//								ЗначенияПараметров.Добавить(ЗначениеПараметра);
		//								ЗначениеПараметра = "";
		//								Значи.Добавить(ТекЗнач);
		//								ТекЗнач = Ложь;
		//							ИначеЕсли ТекСимвол = ")" Тогда
		//								ИменаПараметров.Добавить(ИмяПараметра);
		//								ЗначенияПараметров.Добавить(ЗначениеПараметра);
		//								ЗначениеПараметра = "";
		//								Значи.Добавить(ТекЗнач);
		//								Режим = "МЕТОД";
		//								Если Сред(МодульВРег, Поз, 9) = ") ЭКСПОРТ" Тогда
		//									Поз = Поз + 8;
		//								ИначеЕсли Сред(МодульВРег, Поз, 10) = ")  ЭКСПОРТ" Тогда
		//									Поз = Поз + 9;
		//								КонецЕсли;
		//							ИначеЕсли ТекСимвол = """" Тогда
		//								Режим = "ТЕКСТ";
		//							ИначеЕсли НЕ ЗначениеЗаполнено(ТекСимвол) Тогда
		//							Иначе
		//								Режим = "ИМЯ";
		//								ИмяПараметра = ИмяПараметра + ТекСимМод;
		//							КонецЕсли;
		//						ИначеЕсли Режим = "МЕТОД" Тогда
		//							Если ТекСимвол = "К" И 
		//									(Сред(МодульВРег, Поз, 14) = "КОНЕЦПРОЦЕДУРЫ" И (НЕ ЗначениеЗаполнено(Сред(МодульВРег, Поз + 14, 1)) ИЛИ Сред(МодульВРег, Поз + 14, 2) = "//")
		//									ИЛИ Сред(МодульВРег, Поз, 12) = "КОНЕЦФУНКЦИИ" И (НЕ ЗначениеЗаполнено(Сред(МодульВРег, Поз + 12, 1)) ИЛИ Сред(МодульВРег, Поз + 12, 2) = "//"))
		//									И НЕ ЗначениеЗаполнено(Сред(МодульВРег, Поз - 1, 1))
		//									Тогда
		//								Режим = "ОК";
		//								Прервать;
		//							ИначеЕсли ТекСимвол = "В" И Сред(МодульВРег, Поз, 7) = "ВОЗВРАТ" Тогда
		//								Если ЭтоФункция Тогда
		//									Если НЕ ЗначениеЗаполнено(Сред(МодульВРег, Поз + 7, 1))
		//											И (Сред(МодульВРег, Поз - 1, 1) = ";" ИЛИ НЕ ЗначениеЗаполнено(Сред(МодульВРег, Поз - 1, 1))) Тогда
		//										ТекстМетода = ТекстМетода + "РезультатВыполненияВозвращаемый_КАК_Функцией = ";
		//										Поз = Поз + 6;
		//									КонецЕсли;
		//								Иначе
		//									Если (Сред(МодульВРег, Поз + 7, 1) = ";" ИЛИ НЕ ЗначениеЗаполнено(Сред(МодульВРег, Поз + 7, 1))) И
		//											(Сред(МодульВРег, Поз - 1, 1) = ";" ИЛИ НЕ ЗначениеЗаполнено(Сред(МодульВРег, Поз - 1, 1))) Тогда
		//										Поз = Поз + 6;
		//									КонецЕсли;
		//								КонецЕсли;
		//							Иначе
		//								ТекстМетода = ТекстМетода + ТекСимМод;
		//							КонецЕсли;
		//						КонецЕсли;
		//					КонецЦикла;
		//					Если Режим = "ОК" Тогда
		//						Прервать;
		//					КонецЕсли;
		//				#КонецОбласти
		//			КонецЕсли;
		//		#КонецОбласти
		//	КонецЦикла;
		//	ДанныеМетода = Новый Структура("ТекстМетода,Значи,ИменаПараметров,ЗначенияПараметров", ТекстМетода, Значи, ИменаПараметров, ЗначенияПараметров);
		//	СооТекстов.Вставить(ИмяМетода, ДанныеМетода);
		//КонецЕсли;
	#КонецОбласти
	мТекстВСкобках = СтрРазделить(Сред(ТекстВызова, ПозСкобки + 1, СтрДлина(ТекстВызова) - ПозСкобки - 1), ",", Истина);
	ТекстПараметровДо = "";
	ТекстПараметровПосле = "";
	Колво = мТекстВСкобках.ВГраница();
	Для ЁХХ = 0 По ДанныеМетода.Параметры.ВГраница() Цикл
		ВходящееИмя = ?(ЁХХ > Колво, "", СокрЛП(мТекстВСкобках[ЁХХ]));
		Если ЗначениеЗаполнено(ВходящееИмя) Тогда
			ТекстПараметровДо = ТекстПараметровДо + Символы.ПС + ДанныеМетода.Параметры[ЁХХ].Имя + " = Структура_ПараметровПереданных." + ВходящееИмя + ";";
			Если НЕ ДанныеМетода.Параметры[ЁХХ].ЭтоЗнач Тогда
				ТекстПараметровПосле = ТекстПараметровПосле + Символы.ПС + "Структура_ПараметровПереданных." + ВходящееИмя + " = " + ДанныеМетода.Параметры[ЁХХ].Имя + ";";
			КонецЕсли;
		Иначе
			ТекстПараметровДо = ТекстПараметровДо + Символы.ПС + ДанныеМетода.Параметры[ЁХХ].Имя + " = " + ДанныеМетода.Параметры[ЁХХ].Значение + ";";
		КонецЕсли;
	КонецЦикла;
	Возврат ВыполнитьКодСПараметрами(ТекстПараметровДо + Символы.ПС + ДанныеМетода.Текст + ";" + Символы.ПС + ТекстПараметровПосле, СПрм)
КонецФункции // ВыполнитьПоТекстуМетода

// Выполняет серверный метод объекта формы
// Параметры:
//  ВыполняемыйКод  - Строка - Текст вызова метода
//  ЭтоФункция - Булево - Вызвать метод как функцию. По умолчанию Ложь. 
//  СПрм - Строка - Текст вызова метода
//  НастоящийОбъект  - Строка/ОбработкаОбъект - Если "Клиент" (умолч.), объект будет автоопределён, а если "Сервер" - ещё и возвращён.
//			Другие значения приведут к ошибке!
// Возвращаемое значение:
//   Структура   - Ключи:
//		*Успех - выполнено без ошибок
//		*Результат - результат выполнения
&НаСервере
Функция ВыполнитьМетодНастоящегоОбъекта(ВыполняемыйКод, ЭтоФункция = Ложь, СПрм = Неопределено, НастоящийОбъект = "Клиент") Экспорт
	ОтменаВозврата = НастоящийОбъект = "Клиент";
	Если ОтменаВозврата ИЛИ НастоящийОбъект = "Сервер" Тогда
		НастоящийОбъект = Вычислить("РеквизитФормыВЗначение(""Объект"")");
	КонецЕсли;
	Попытка
		Результат = НастоящийОбъект.ВыполнитьКод("НастоящийОбъект." + ВыполняемыйКод, СПрм, ЭтоФункция);
		Успех = Истина;
	Исключение
		Успех = Ложь;
	КонецПопытки;
	Если ОтменаВозврата Тогда
		НастоящийОбъект = "Клиент";
	КонецЕсли;
	Возврат Новый Структура("Результат,Успех", Результат, Успех)
КонецФункции // ВыполнитьМетодНастоящегоОбъекта

#КонецОбласти

#Область ОБРАБОТКА_КОДА

&НаСервере
Функция РазобратьТекстКода(тКод, ГдеВыполнять)
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	Возврат Настоящий.РазобратьТекстКода(тКод, ГдеВыполнять);
КонецФункции // РазобратьТекстКода(Поле)

// Разбирает текст модуля и возвращает структуру методов
// Возвращаемое значение:
//   Структура   - ИмяМетода => Текст, ЭтоФункция, ЭтоЭкспорт, Параметры = массив структур(Имя, Значение, ЭтоЗнач)
&НаСервере
Функция СобратьТрансляциюМодуляКС()
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	Возврат Настоящий.СобратьТрансляциюМодуля(МодульКС);
КонецФункции // СобратьТрансляциюМодуляКС

// ВВызывает метод из текста модуля и передаёт ему параметры
// Параметры:
//  ОписаниеМетода  - Структура - ключи Параметры ==> Массив структур с ключами Значение, Имя, ФактическийТекст, ЭтоЗнач; ЭтоЭкспорт; ЭтоФункция; Текст.
//  Возвратные  - Строка - Строка из 0 и 1, где при 1 параметр надо возвращать (он был задан переменной, а 0 = нет.
//  Параметр01..25  - Произвольный - Параметр в структуру
// Возвращаемое значение:
//   Произвольный   - Результат выполнения метода
&НаКлиенте
Функция УниверсальныйВызовМетодаИзТекста(ОписаниеМетода, Возвратные = "", Параметр01 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр02 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр03 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр04 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр05 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр06 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр07 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр08 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр09 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр10 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр11 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр12 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр13 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр14 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр15 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр16 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр17 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр18 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр19 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр20 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр21 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр22 = "НЕ____БЫЛ_____НАЗНАЧЕН",
		Параметр23 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр24 = "НЕ____БЫЛ_____НАЗНАЧЕН", Параметр25 = "НЕ____БЫЛ_____НАЗНАЧЕН")
	Результат = Неопределено;
	#Область ПЕРЕИМЕНОВАНИЯ_ПАРАМЕТРОВ_ПОД_МЕТОД_И_НАЗАД
		ТекстКодаДоВызова = "";
		ТекстКодаПослеВызова = "";
		//ДлинаПараметраВозвратных = СтрДлина(Возвратные);
		НомерПараметра = 1;
		Для каждого ОписаниеПараметра Из ОписаниеМетода.Параметры Цикл
			ИмяПараметра = "Параметр" + Прав("00" + НомерПараметра, 2);
			ПараметрНазначен = НЕ Вычислить(ИмяПараметра + "=""НЕ____БЫЛ_____НАЗНАЧЕН""");
			ЭтоПеременная = Истина;//А почему бы и не вернуть всегда ПараметрНазначен И НомерПараметра <= ДлинаПараметраВозвратных И Сред(Возвратные, НомерПараметра, 1) = "1";
			ТекстКодаДоВызова = ТекстКодаДоВызова + ОписаниеПараметра.Имя
					+ "=" + ?(ПараметрНазначен, ИмяПараметра, ОписаниеПараметра.Значение) + ";" + Символы.ПС;
			Если ЭтоПеременная И НЕ ОписаниеПараметра.ЭтоЗнач Тогда
				 ТекстКодаПослеВызова = ТекстКодаПослеВызова + Символы.ПС + ИмяПараметра + "=" + ОписаниеПараметра.Имя;
			КонецЕсли;
			НомерПараметра = НомерПараметра + 1;
		КонецЦикла;
	#КонецОбласти	
	#Область ВЫПОЛНЕНИЕ
		Результат = ВыполнитьКодИзТекстаСПараметрами(ТекстКодаДоВызова + ОписаниеМетода.Текст + ТекстКодаПослеВызова, Параметр01, Параметр02, Параметр03, Параметр04, Параметр05,
				Параметр06, Параметр07,  Параметр08, Параметр09, Параметр10, Параметр11, Параметр12, Параметр13, Параметр14, Параметр15, Параметр16, Параметр17,
				Параметр18, Параметр19, Параметр20, Параметр21, Параметр22, Параметр23, Параметр24, Параметр25);
	#КонецОбласти	
	Возврат Результат
КонецФункции // УниверсальныйВызовМетодаИзТекста

#КонецОбласти

#КонецОбласти

#Область ДЕРЕВО_МЕНЮ
	
// Находит команду в меню и возвращает данные её строки дерева
// Параметры:
//  ИмяКоманды  - Строка - Имя для поиска
// Возвращаемое значение:
//   Структура   - с заданными ключами.
&НаСервере
Функция ДанныеМенюПоКоманде(ИмяКоманды, Ключи)
	Результат = Новый Структура(Ключи);
	ДеревоМеню = ПолучитьИзВременногоХранилища(АдресДереваМеню);
	СтрокаМеню = ДеревоМеню.Строки.Найти(ИмяКоманды, "Имя", Истина);
	Если СтрокаМеню <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, СтрокаМеню);
	КонецЕсли;
	Возврат Результат
КонецФункции // ДанныеМенюПоКоманде

// Выполняет поиск в дереве
// Параметры:
//  ИмяКоманды  - Строка - Что искат
// Возвращаемое значение:
//   Булево   - Найдена
Функция ЕстьВДеревеМеню(ИмяКоманды)
	Клён = ПолучитьИзВременногоХранилища(АдресДереваМеню);
	Результат = Клён.Строки.Найти(ИмяКоманды, "Имя", Истина) <> Неопределено;
	Возврат Результат
КонецФункции // ЕстьВДеревеМеню

// Проверяет наличие ИД в меню команд и возможность его удалить.
// Возвращаемое значение:
//   Строка   - Текст вопроса перед удалением
&НаСервере
Функция ПроверитьИДвМеню(УдаляемыйИД)
	Результат = "";
	ДеревоМеню = ПолучитьИзВременногоХранилища(АдресДереваМеню);
	СтрокаКУдалению = ДеревоМеню.Строки.Найти(УдаляемыйИД, "ИД_", Истина);
	Если СтрокаКУдалению = Неопределено Тогда
		Результат = "ИД не обнаружен в меню";
	Иначе
		Родитель_ = СтрокаКУдалению.Родитель;
		Если Родитель_ = Неопределено Тогда
			Родитель_ = СтрокаКУдалению.Владелец();
		КонецЕсли;
		Если Родитель_.Строки.Количество() = 1 Тогда
			Результат = Результат + "Это единственный пункт в подменю. Удалить вместе с подменю?" + Символы.ПС;
		КонецЕсли;
		Если СтрокаКУдалению.Строки.Количество() > 0 Тогда
			Результат = Результат + "Это подменю. Удалить вместе с содержимым?" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат
КонецФункции // ПроверитьИДвМеню

// Удаляет ИД из дерева меню и сохраняет  дерево меню
// Параметры:
//  СПодменю  - Булево - УдалитьПодменю-родитель
&НаСервере
Процедура УдалитьИзДереваМеню(УдаляемыйИД, СПодменю)
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	ПоместитьВХранилищеФормы(Настоящий.УдалитьИзДереваМеню(УдаляемыйИД, СПодменю, АдресДереваМеню), АдресДереваМеню);
КонецПроцедуры // УдалитьИзДереваМеню

#КонецОбласти

#Область ЛИЦЕНЗИЯ
	
// Проверяет и устанавливает результат принятия соглашения
// Параметры:
//  ТолькоПринято  - Строка - Непустая = Принято = установить
// Возвращаемое значение:
//   Булево   - Соглашение не принято
&НаСервере
Функция НетПрав(ТолькоПринято = "")
	Настоящий = Неопределено; ПроверитьНастоящий(Настоящий);
	Возврат Настоящий.НетПрав(ТолькоПринято);
КонецФункции // НетПрав

// Проверяет ответ о согласии с лицензией
// Параметры:
//  Результат  - КодВозвратаДиалога - Результат обрабочика
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика
&НаКлиенте
Процедура ОбработкаОтветаОПравах(Результат, СтруктураПараметров = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		НетПрав("40°");
	Иначе
		Закрыть(Ложь);
	КонецЕсли; 
КонецПроцедуры // ОбработкаОтветаОПравах

// Вызывает диалог о правах
// Параметры:
//  Результат  - Булево - Результат обрабочика проверки существования файла
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика. Содержит параметры Обработчик___ и ИмяФайла___
&НаКлиенте
Процедура ПоказатьТекстОПравах() Экспорт
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОтветаОПравах", ЭтотОбъект), ТекстПрав(), РежимДиалогаВопрос.ДаНет);
КонецПроцедуры // ПоказатьТекстОПравах

// Возвращает текст вопроса о лицензионных правах (да = согласие)
// Параметры:
//    -  - 
// Возвращаемое значение:
//   Строка   - Текст вопроса
&НаСервере
Функция ТекстПрав()
	Настоящий = Неопределено; ПроверитьНастоящий(Настоящий);
	Возврат Настоящий.ТекстОЛицензии();
КонецФункции // ТекстПрав

#КонецОбласти

#Область НАСТРОЙКИ_МЕНЮ_КОМАНДЫ_СОХРАНЕНИЕ_ВОССТАНОВЛЕНИЕ

#Область ПАНЕЛИ_И_КНОПЫ_ФОРМИРОВАНИЕ
	
// Создаёт командные панели формы 3.0 ок
&НаКлиенте
Процедура СформироватьКомандныеПанели()
	СформироватьПанель("КПКод", "ГруппаКода", 0);
	СформироватьПанель("КПЗапроса", "ГруппаЗапроса", 0);
	СформироватьПанель("КПСКД",  "ГруппаЗапроса", 1);
КонецПроцедуры // СформироватьКомандныеПанели
 
&НаСервере
Процедура СформироватьПанель(ИмяПанели, КудаДобавить, Позиция = Неопределено)
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	Приёмник = Элементы.Найти(ИмяПанели);
	Если Приёмник = Неопределено Тогда
		Если Позиция = Неопределено Тогда
			Приёмник = Элементы.Добавить(ИмяПанели, Тип("ГруппаФормы"), Элементы[КудаДобавить]);
		Иначе
			Приёмник = Элементы.Вставить(ИмяПанели, Тип("ГруппаФормы"), Элементы[КудаДобавить], Элементы[КудаДобавить].ПодчиненныеЭлементы[Позиция]);
		КонецЕсли;
		Приёмник.Вид = ВидГруппыФормы.КоманднаяПанель;
	КонецЕсли;
	Ё = 1;
	ДеревоКомандПанели = Неопределено;
	Пока Истина Цикл
		ВсеПанели = ПолучитьИзВременногоХранилища(АдресДереваМеню);
		Если Ё > 3 Тогда
			Прервать;
		ИначеЕсли ЗначениеЗаполнено(ВсеПанели) Тогда
			ДеревоКомандПанели = ВсеПанели.Строки.Найти(ИмяПанели, "Имя", Ложь);
			Если ДеревоКомандПанели <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		МенюНастройкиИКомандыВРеквизиты(, Ложь,, Ложь);
		Ё = Ё + 1;
	КонецЦикла;
	ГруппаКнопок = СоздатьГруппуКноп(ИмяПанели + "____Гр1", Приёмник);
	Для каждого Строчка Из ДеревоКомандПанели.Строки Цикл
		ДобавитьКнопкиВПанель(ГруппаКнопок, Строчка, Настоящий, Приёмник);
	КонецЦикла; 
КонецПроцедуры // СформироватьПанель
 
&НаСервере
Функция СоздатьГруппуКноп(ИмяКнопы, КудаДобавить)
	ГруппаКнопок = Элементы.Добавить(ИмяКнопы, Тип("ГруппаФормы"), КудаДобавить);
	ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
	ГруппаКнопок.Отображение = ОтображениеГруппыКнопок.Компактное;
	Возврат ГруппаКнопок
КонецФункции // СоздатьГруппуКноп
 
&НаСервере
//Добавляет кнопу
//	Параметры:
//	Подменю - КомПанель или подменю - приёмнкик, куда добавить
//	СтрокаДерева - Источник информации с колонками Имя, Представление, ДопИнф, Картинка, ХотКей и Подсказка
//	Обработка_ - Объект этой обработки - Для выполнения методов
//	Панель - КомПанель - для корня
Процедура ДобавитьКнопкиВПанель(Подменю, СтрокаДерева, Обработка_, Панель = Неопределено)
	НужнаКартинка = Истина;
	Если СтрокаДерева.ДопИнф = "СКРЫТЬ" Тогда
	ИначеЕсли СтрокаДерева.Строки.Количество() > 0 Тогда
		//Это подменю
		НоваяКнопа = Элементы.Добавить(СтрокаДерева.Имя, Тип("ГруппаФормы"), Подменю);
		НоваяКнопа.Заголовок = СтрокаДерева.Команда;
		НоваяКнопа.Вид = ВидГруппыФормы.Подменю;
		Для каждого Строчка Из СтрокаДерева.Строки Цикл
			ДобавитьКнопкиВПанель(НоваяКнопа, Строчка, Обработка_);
		КонецЦикла; 
	Иначе
		//Это кнопка
		Если СтрокаДерева.ДопИнф = "РАЗДЕЛИТЕЛЬ" Тогда
			Если Панель = Неопределено Тогда
				//Это подменю
				НоваяКнопа = Элементы.Добавить(СтрокаДерева.Имя, Тип("КнопкаФормы"), Подменю);
				НоваяКнопа.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
				НоваяКнопа.Заголовок = "--------------";
				НоваяКнопа.ИмяКоманды = "Ничего";
			Иначе
				//Это основная панель
				Подменю = СоздатьГруппуКноп(СтрокаДерева.Имя, Панель);
				НужнаКартинка = Ложь;
			КонецЕсли; 
		Иначе
			НоваяКнопа = Элементы.Добавить(СтрокаДерева.Имя, Тип("КнопкаФормы"), Подменю);
			НоваяКнопа.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			ИмяКом = "Команда___" + СтрокаДерева.Имя;
			НоваяКоманда = Команды.Найти(ИмяКом);
			Если НоваяКоманда = Неопределено Тогда
				НоваяКоманда = Команды.Добавить(ИмяКом);
			КонецЕсли;
			НоваяКоманда.Действие = "ВыполнитьКомандуЭтойФормы";
			НоваяКнопа.Заголовок = ?(СтрокаДерева.Команда = "", СтрокаДерева.Имя, СтрокаДерева.Команда);
			НоваяКнопа.ИмяКоманды = ИмяКом;
			ВремСК = Обработка_.СочетаниеКлавишПоСтроке(СтрокаДерева.ХотКей);
			Если ВремСК <> Неопределено Тогда
				НоваяКнопа.СочетаниеКлавиш = ВремСК;
			КонецЕсли;
			Если СтрокаДерева.ДопИнф = "ФЛАГ" Тогда
				НоваяКнопа.Пометка = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	Если НужнаКартинка Тогда
		Если ?(СтрокаДерева.Картинка = Неопределено, Истина, СтрокаДерева.Картинка.Вид = ВидКартинки.Абсолютная) Тогда
			НоваяКнопа.Отображение = ОтображениеКнопки.Текст;
		Иначе
			НоваяКнопа.Картинка = СтрокаДерева.Картинка;
		КонецЕсли; 
		НоваяКнопа.РасширеннаяПодсказка.Заголовок = СтрокаДерева.Подсказка;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

// Выполняет автоматический вариант сохранения текущих настроек (по умолчанию)
&НаСервере
Процедура АвтоСохранение_НастроекНаСервере()
	#Область АВТОПАРАМЕТРЫ
		ПараметрыСохранения = Новый Структура("ИмяКоманды,ИмяПодменю,Подсказка,ПредставлениеКоманды,ПредставлениеПодменю,ПутьККоманде,ПутьККартинке,ПередПосле,"
				+ "ПерезаписатьТекстЗапроса,ПерезаписатьТекстКода,СохранитьТекстКода,СохранитьТекстЗапроса,СохранитьПредмет,"
				+ "СохранитьПараметры,СохранитьКоманды,СохранитьМеню,СохранитьЧАКО,ЭтоРазделитель,СохранитьСКД,СохранитьТаб1,СохранитьТаб2,СохранитьТД,ТолькоДляМеня,ХотКей",
				"#Текущая",
				"",	"",	"",	"",	"",	"",	Неопределено, Ложь, Ложь,
				Истина, //Текст кода
				Истина,
				Истина,
				Истина,
				Ложь,  //Команды
				Ложь,
				Ложь,
				Ложь,
				Истина,
				Истина,
				Истина,
				Истина,
				Истина, "");
	#КонецОбласти
	ПараметрыСохранения.Вставить("ВХранилищеОбщих", Истина);
	ПараметрыСохранения.Вставить("ПутьСохранения", "#Текущие");
	ПараметрыСохранения.Вставить("ИнтервалАвтосохраненияВСекундах", ИнтервалАвтосохраненияВСекундах);
	ПараметрыСохранения.Вставить("Имена_Настроек", Имена_Настроек);
	Код = "Результат = ПодготовитьИСохранитьНастройки(ПутьСохранения, Прм,, ВХранилищеОбщих)";
	ВызватьАлгоритмОбъект(Код, ПараметрыСохранения);
	ПоследнееАС = ТекущаяУниверсальнаяДатаВМиллисекундах();
КонецПроцедуры // АвтоСохранение_НастроекНаСервере

&НаСервере
Функция ЗагрузитьНастройкиПоИмени(Настоящий = Неопределено, Имя = "Настройки")
	Сбросить = ПроверитьНастоящий(Настоящий);
	Результат = Настоящий.ЗагрузитьМенюНастройкиИКоманды(Новый Структура("Команды,Меню,Настройки"), "Общие", Имя, "", "");
	Результат = Настоящий.ЗагрузитьМенюНастройкиИКоманды(Результат, ИмяПользователя(), Имя, "", "");
	Если Результат.Настройки = Неопределено Тогда
		Результат = Новый Структура("ТекстЗапроса,ТекстКода", "", "");
	Иначе
		АдресНастроекФормы = ПоместитьВХранилищеФормы(Результат.Настройки, АдресНастроекФормы);
		Результат = ПрименитьНастройки(Настоящий);
	КонецЕсли;
	Сбросить = ПроверитьНастоящий(Настоящий, Сбросить);
	Возврат Результат
КонецФункции //ЗагрузитьНастройкиПоИмени

// Загружает меню, настройки и команды из сохранённых
// Параметры:
//  ИмяНастроекИлиФайла  - Строка - Имя настроек в общем хранилище или файла на диске на клиенте
//  Имя_Пользователя  - Строка - Имя пользователя настроек, "#ФАЙЛ" для файла или пустое значение (по умолчанию) для текущего пользователя
// Возвращаемое значение:
//   Строка   - Сообщение об ошибке
&НаКлиенте
Функция ЗагрузитьСохранённыеНастройки(ИмяНастроекИлиФайла, Имя_Пользователя = "")
	Результат = "";
	Если Имя_Пользователя = "#ФАЙЛ" Тогда
		//!!!!
	Иначе
		
	КонецЕсли;
	
	Возврат Результат
КонецФункции // ЗагрузитьСохранённыеНастройки

&НаСервере
Процедура МенюНастройкиИКомандыВРеквизиты(Настоящий = Неопределено, Команды = Истина, Меню = Истина, Настройки = Истина, Юзер = "", ИмяНастроек = "")
	Сбросить = ПроверитьНастоящий(Настоящий);
	ВсеНастройкиМенюИКоманды = Настоящий.ЗагрузитьМенюНастройкиИКоманды(, "Общие");
	ВсеНастройкиМенюИКоманды = Настоящий.ЗагрузитьМенюНастройкиИКоманды(ВсеНастройкиМенюИКоманды, ?(Юзер = "", ИмяПользователя(), Юзер),,,,, ИмяНастроек);
	Если Настройки Тогда
		АдресНастроекФормы = ПоместитьВХранилищеФормы(ВсеНастройкиМенюИКоманды.Настройки, АдресНастроекФормы);
	КонецЕсли;
	Если Команды Тогда
		КомандыСписок = ВсеНастройкиМенюИКоманды.Команды;
	КонецЕсли;
	Если Меню Тогда
		АдресДереваМеню = ПоместитьВХранилищеФормы(ВсеНастройкиМенюИКоманды.Меню, АдресДереваМеню);
	КонецЕсли;
	ИнтервалАвтосохраненияВСекундах = Настоящий.ЧтСтрукт(ВсеНастройкиМенюИКоманды, "ИнтервалАвтосохранения", 150);
	ВремИмена = Настоящий.ЧтСтрукт(ВсеНастройкиМенюИКоманды, "ИменаНастроек", Новый Соответствие);
	Если ЗначениеЗаполнено(ВремИмена) Тогда
		ЭтотОбъект.Имена_Настроек = ВремИмена.Скопировать(); 
	КонецЕсли;
	//ИменаНастроек = Настоящий.ЧтСтрукт(ВсеНастройкиМенюИКоманды, "ИменаНастроек", Новый Соответствие);
	//Для каждого КиЗ Из ВсеНастройкиМенюИКоманды.ИменаНастроек Цикл
	//	Имена_Настроек.Добавить(КиЗ.Ключ, КиЗ.Ключ);
	//КонецЦикла;
	Сбросить = ПроверитьНастоящий(Настоящий, Сбросить);
КонецПроцедуры //МенюНастройкиИКомандыВРеквизиты

// Применяет настройки из временного хранилища к форме. Возвращает структуру данных для вставки в элементы
&НаСервере
Функция ПрименитьНастройки(Настоящий, ВсегдаПерезаписывать = Ложь)
	Сбросить = ПроверитьНастоящий(Настоящий);
	Результат = Новый Структура("ТекстЗапроса,ТекстКода", "", "");
	ДанныеНастройки = ПолучитьИзВременногоХранилища(АдресНастроекФормы); //см.МО.СтандартныйСписокНастроек
	//ДобавленныеТаблицы,ДопТаблица
	//ЕстьДобавленныеТаблицы,ЕстьДопТаблица,ЕстьМВТ,ЕстьПараметры_,ЕстьПредмет,ЕстьСКД,ЕстьТабДокумент,ЕстьТабЗначений,ЕстьТекстЗапроса,ЕстьТекКода,ЕстьЧАКО
	//МВТ,Параметры_,Предмет,СКД,НастройкиСКД,ПерезаписатьТекстЗапроса,ПерезаписатьТекстКода,ТабДокумент,ТабЗначений,ТекстЗапроса,ТекКода,ЧАКО
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьМВТ", Ложь) Тогда
		АдресМВТ = ПоместитьВХранилищеФормы(ДанныеНастройки.МВТ, АдресМВТ);
	КонецЕсли; 
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьСКД", Ложь) Тогда
		АдресСКД = ПоместитьВХранилищеФормы(ДанныеНастройки.СКД, АдресСКД);
		АдресНастроекСКД = ПоместитьВХранилищеФормы(?(ДанныеНастройки.Свойство("НастройкиСКД"), ДанныеНастройки.НастройкиСКД, Неопределено), АдресНастроекСКД);
	КонецЕсли; 
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьПараметры_", Ложь) Тогда
		Параметры_.Загрузить(ДанныеНастройки.Параметры_);
		Элементы.Параметры_.Обновить();
	КонецЕсли; 
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьДопТаблица", Ложь) Тогда
		Настоящий.СоздатьКолонкиТаблицы(ЭтотОбъект, "ДопТаблица", ДанныеНастройки.ДопТаблица, "Загрузка");
	КонецЕсли; 
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьТабЗначений", Ложь) Тогда
		Настоящий.СоздатьКолонкиТаблицы(ЭтотОбъект, "ТабЗначений", ДанныеНастройки.ТабЗначений, "Загрузка");
	КонецЕсли; 
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьПредмет", Ложь) Тогда
		Предмет = ДанныеНастройки.Предмет;
	КонецЕсли; 
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьТабДокумент", Ложь) Тогда
		ТабДокумент = ДанныеНастройки.ТабДокумент;
	КонецЕсли; 
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьТекстЗапроса", Ложь) Тогда
		Если ВсегдаПерезаписывать ИЛИ ДанныеНастройки.ПерезаписатьТекстЗапроса Тогда
			ТекстЗапроса = ДанныеНастройки.ТекстЗапроса;
		Иначе
			Результат.Вставить("ТекстЗапроса", ДанныеНастройки.ТекстЗапроса);
		КонецЕсли;
	КонецЕсли; 
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьТекстКода", Ложь) Тогда
		Если ВсегдаПерезаписывать ИЛИ ДанныеНастройки.ПерезаписатьТекстКода Тогда
			ТекстКода = ДанныеНастройки.ТекстКода;
		Иначе
			Результат.Вставить("ТекстКода", ДанныеНастройки.ТекстКода);
		КонецЕсли;
	КонецЕсли; 
	Если Настоящий.ЧтСтрукт(ДанныеНастройки, "ЕстьЧАКО", Ложь) Тогда
		Для каждого КиЗ Из ДанныеНастройки.ЧАКО Цикл
			СтрокиЧАКО = НастройкиЧАКО.НайтиСтроки(КиЗ.Ключ, "Номер");
			СтрокаЧАКО = ?(СтрокиЧАКО.Количество(), СтрокиЧАКО[0], НастройкиЧАКО.Добавить());
			СтрокаЧАКО.Номер = КиЗ.Ключ;
			ЗаполнитьЗначенияСвойств(СтрокаЧАКО, КиЗ.Значение);
			ТекЭлемент = Элементы["ЧАКО" + КиЗ.Ключ];
			ТекЭлемент.Заголовок = КиЗ.Значение.Заголовок;
			ТекЭлемент.Картинка = Настоящий.ПолучитьКартинку(КиЗ.Значение.Рисунок);
			ТекЭлемент.СочетаниеКлавиш = Настоящий.СочетаниеКлавишПоСтроке(КиЗ.Значение.ХотКей);
		КонецЦикла;
	КонецЕсли; 
	Сбросить = ПроверитьНастоящий(Настоящий, Сбросить);
	Возврат Результат
КонецФункции // ПрименитьНастройки

// Читает настройки из двоичных данных в хранилище, сохраняет их в общее хранилище и применяет
// Параметры:
//  АдресДД  - Строка - Адрес источника - двоичных данных
&НаСервере
Процедура ПрочитатьНастройкиИЗапихнутьВХранилище(АдресДД)
	ПотокЧтения = ПолучитьИзВременногоХранилища(АдресДД).ОткрытьПотокДляЧтения();
	Читалка = Новый ЧтениеXML;
	Читалка.ОткрытьПоток(ПотокЧтения);
	Корь = "http://v8.1c.ru/8.1/data/core";
	ТипОбъектаXDTO = ФабрикаXDTO.Тип(Корь,"Structure");
	//ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO);
	//ОбъектXDTO = ФабрикаXDTO.ЭкспортМоделиXDTO(Корь);
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(Читалка, ТипОбъектаXDTO);
	ОбъектXDTO.Проверить();
	Читалка.Закрыть();
	ПотокЧтения.Закрыть();
	ПоместитьВоВременноеХранилище(Неопределено, АдресДД);
	СтруктураВсеНастройки = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
	//СтруктураВсеНастройки = ПрочитатьXML(Читалка);
	//ПоместитьВХранилищеФормы(СтруктураВсеНастройки.Настройки, АдресНастроекФормы);
	//ПоместитьВХранилищеФормы(СтруктураВсеНастройки.Меню, АдресДереваМеню);
	//КомандыСписок = СтруктураВсеНастройки.Команды;
	Имя_Пользователя = ИмяПользователя();
	Если СтруктураВсеНастройки.Свойство("Команды") И ЗначениеЗаполнено(СтруктураВсеНастройки.Команды) Тогда
		 Для каждого КиЗКоманды Из СтруктураВсеНастройки.Команды Цикл
		 	 Если КиЗКоманды.Значение.Свойство("СтруктураНастроек") Тогда
				 ХранилищеОбщихНастроек.Сохранить(
				 		"КонсольДанных_____",
				 		"Команда___" + КиЗКоманды.Ключ,
				 		КиЗКоманды.Значение.СтруктураНастроек,,
						?(КиЗКоманды.Значение.Вид = "О", "Общие", Имя_Пользователя));
				 КиЗКоманды.Значение.Удалить("СтруктураНастроек");
			 КонецЕсли;
		 КонецЦикла;
	КонецЕсли;
	Для каждого КиЗ Из СтруктураВсеНастройки Цикл
		ХранилищеОбщихНастроек.Сохранить("КонсольДанных_____", КиЗ.Ключ, КиЗ.Значение,, Имя_Пользователя);
	КонецЦикла;
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	МенюНастройкиИКомандыВРеквизиты(Настоящий);
	ПрименитьНастройки(Настоящий, Истина);
КонецПроцедуры // ПрочитатьНастройкиИЗапихнутьВХранилище

// Сохраняет меню, команды, настройки, имена настроек и интервал автосохранения в текущие настройки общего хранилища
&НаКлиенте
Процедура СохранитьВсеТекущиеНастройки()
	АвтоСохранение_НастроекНаСервере();
КонецПроцедуры // СохранитьВсеТекущиеНастройки

// Стартует обработчик ожидания автосохранения
&НаКлиенте
Процедура СтартОжиданияАвтоСохранения()
	ПодключитьОбработчикОжидания("СохранитьВсеТекущиеНастройки", ИнтервалАвтосохраненияВСекундах);
КонецПроцедуры // СтартОжиданияАвтоСохранения

#КонецОбласти

#Область ПЕРЕХОД_КЛИЕНТ_СЕРВЕР_ОБЪЕКТ
	
// Возвращает в форму данные СПарам
&НаКлиенте
Процедура ВыгрузитьСтруктуруПараметровК(Прм)
	Для каждого КиЗ Из Прм Цикл
		СтрочкиТП = Параметры_.НайтиСтроки(Новый Структура("ИмяПараметра", КиЗ.Ключ));
		КУдалению = Новый Массив;
		Спец = 0;
		Для каждого СтрочкаТП Из СтрочкиТП Цикл
			Если СтрочкаТП.ЗначениеПараметра = "&ТабЗначений"
					ИЛИ СтрочкаТП.ЗначениеПараметра = "&ДопТаблица"
					ИЛИ СтрочкаТП.ЗначениеПараметра = "&Предмет"
					ИЛИ СтрочкаТП.ЗначениеПараметра = "&Код"
					ИЛИ Лев(СтрочкаТП.ЗначениеПараметра, 11) = "Результат ="
					Тогда
				Спец = Спец + 1;
			Иначе
				КУдалению.Добавить(СтрочкаТП);
			КонецЕсли;
		КонецЦикла;
		Для каждого Удаляемая Из КУдалению Цикл
			Параметры_.Удалить(Удаляемая);
		КонецЦикла;
		Если ТипЗнч(КиЗ.Значение) = Тип("Массив") Тогда
			Для каждого Элм Из КиЗ.Значение Цикл
				НовСтрока = Параметры_.Добавить();
				НовСтрока.ИмяПараметра = КиЗ.Ключ;
				НовСтрока.ЗначениеПараметра = Элм;
			КонецЦикла;
		ИначеЕсли Спец <> 1 Тогда
			НовСтрока = Параметры_.Добавить();
			НовСтрока.ИмяПараметра = КиЗ.Ключ;
			НовСтрока.ЗначениеПараметра = КиЗ.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ВыгрузитьСтруктуруПараметровК

// Возвращает в форму данные СПарам
&НаСервере
Процедура ВыгрузитьСтруктуруПараметровС(Прм, Настоящий)
	Настоящий.СтруктуруПараметровВФорму(Параметры_, Прм);
КонецПроцедуры // ВыгрузитьСтруктуруПараметровС

// Добавляет в выполняемый код параметры из структуры для использования напрямую, как переменные
// Параметры:
//  ТекстКодаПараметр  - Строка - Выполняемый код
//	СтрПараметров - Структура - Параметры, добавляемые в код. Допускается использование строки таблицы значений, но только если указан ДобавитьТолькоЭтиКлючи
//	ВКонцеВернутьКакБыло - Булево - В конце кода вернуть значения в структуру. По умолчанию Истина
//	ДобавитьТолькоЭтиКлючи - Строка/Массив  - Через запятую ключи, которые надо добавить. По умолчанию "-В" = Все ключи
// Возвращаемое значение:
//   Строка   - Исправленный код
&НаСервере
Функция ДобавитьПараметрыВВыполняемыйКод(ТекстКодаПараметр, СтрПараметров, ВКонцеВернутьКакБыло = Истина, ДобавитьТолькоЭтиКлючи = "-В") Экспорт
	Результат = РеквизитФормыВЗначение("Объект").ДобавитьПараметрыВВыполняемыйКод(ТекстКодаПараметр, СтрПараметров, ВКонцеВернутьКакБыло, ДобавитьТолькоЭтиКлючи);
	Возврат Результат
КонецФункции // ДобавитьПараметрыВВыполняемыйКод

//Готовит параметры выполнения для запуска кода на клиенте
&НаКлиенте
Процедура ЗаполнитьПараметрыВыполненияИзФормыК(Прм)
	Прм.Вставить("Алгоритмы", Объект.Алгоритмы);
	Прм.Вставить("ТекстЗапроса", ТекстЗапроса);
	Прм.Вставить("ТекстКода", ТекстКода);
	Прм.Вставить("ТабДокумент", ТабДокумент);
	Прм.Вставить("ТабЗначений", ОснДФК);
	Прм.Вставить("ДопТаблица", ДопДФК);
	Прм.Вставить("Предмет", Предмет);
	Прм.Вставить("Буфер", Буфер);
	Прм.Вставить("НастройкиСКД", Настройки_СКД);
КонецПроцедуры

//Готовит параметры выполнения для запуска кода на сервере
&НаСервере
Процедура ЗаполнитьПараметрыВыполненияИзФормыС(Настоящий, Прм, НаОбъект = Ложь)
	Прм.Вставить("Алгоритмы", Настоящий.Алгоритмы);
	Прм.Вставить("МВТ", Настоящий.ЧтСтрукт(ПолучитьИзВременногоХранилища(АдресМВТ), "МВТ",, Истина));
	Прм.Вставить("Запрос_", Настоящий.СоздатьЗапрос(ТекстЗапроса, Прм.СПарам, ?(?(НаОбъект, Настоящий, Прм).ИспользоватьМВТ, Прм.МВТ, Неопределено)));
	Прм.Вставить("СКД", ПолучитьИзВременногоХранилища(АдресСКД));
	Прм.Вставить("ДеревоМД", ПолучитьИзВременногоХранилища(АдресДереваМД));
	Прм.Вставить("ТабЗначений", ОснДФК.Выгрузить());
	Прм.Вставить("ДопТаблица", ДопДФК.Выгрузить());
	Если НаОбъект Тогда
		Прм.Вставить("ТекстЗапроса", ТекстЗапроса);
		Прм.Вставить("ТекстКода", ТекстКода);
		Прм.Вставить("ТабДокумент", ТабДокумент);
		Прм.Вставить("Предмет", Предмет);
		Прм.Вставить("НастройкиСКД", Настройки_СКД);
		Прм.Вставить("Буфер", Буфер);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСтруктуруПараметровК()
	Результат = Новый Структура();
	Для Каждого Строчка Из Параметры_ Цикл
		ПопыТка
			Если Строчка.ЗначениеПараметра = "&ТабЗначений" Тогда
				Результат.Вставить(Строчка.ИмяПараметра, ОснДФК);
			ИначеЕсли Строчка.ЗначениеПараметра = "&ДопТаблица" Тогда
				Результат.Вставить(Строчка.ИмяПараметра, ДопДФК);
			ИначеЕсли Строчка.ЗначениеПараметра = "&Предмет" Тогда
				Результат.Вставить(Строчка.ИмяПараметра, Предмет);
			ИначеЕсли Лев(Строчка.ЗначениеПараметра, 4) = "&Код" Тогда
				Результат.Вставить(Строчка.ИмяПараметра, Вычислить(Сред(Строчка.ЗначениеПараметра, 5)));
			ИначеЕсли Лев(Строчка.ЗначениеПараметра, 11) = "Результат =" Тогда
				Результат = Неопределено;
				Выполнить(Строчка.ЗначениеПараметра);
				Результат.Вставить(Строчка.ИмяПараметра, Результат);
			Иначе
				Результат.Вставить(Строчка.ИмяПараметра, Строчка.ЗначениеПараметра)
			КонецЕсли
		Исключение
		КонецПопытки
	КонецЦикла;
	Возврат Результат;
КонецФункции // ЗаполнитьСтруктуруПараметров

&НаСервере
Функция ЗаполнитьСтруктуруПараметровС(Настоящий)
	СтруктураПараметров = Настоящий.ЗаполнитьСтруктуруПараметров(Параметры_, ОснДФК.Выгрузить(), ДопДФК.Выгрузить(), Предмет);
	Возврат ПоместитьВХранилищеФормы(СтруктураПараметров, АдресДляСтруктурыПараметров);
КонецФункции // ЗаполнитьСтруктуруПараметров

// помещает в хранилище по заданному адресу, если он пуст - создаёт новый. Возвращает адрес в хранилище
// Параметры:
//  ЧтоПоместить  - Произвольный - Что положить в хранилище
//  Адрес  - Строка - адрес в хранилище. Изменяется в теле функции.
// Возвращаемое значение:
//   Строка   - Адрес в хранилище формы
&НаСервере
Функция ПоместитьВХранилищеФормы(ЧтоПоместить, Адрес = Неопределено)
	Возврат ПоместитьВоВременноеХранилище(ЧтоПоместить, ?(ЗначениеЗаполнено(Адрес), Адрес, УникальныйИдентификатор))
КонецФункции // ПоместитьВХранилищеФормы

// Проверянт и получает объект этой обработки
// Параметры:
//  Настоящий  - Неопределено/Эта обработка объект - проверяемый
&НаСервере
Функция ПроверитьНастоящий(Настоящий, Сбросить = Ложь)
	Результат = Настоящий = "СБРОСИТЬ";
	Если Сбросить Тогда
		Настоящий = Неопределено;
	ИначеЕсли Результат ИЛИ Настоящий = Неопределено Тогда
		Настоящий = РеквизитФормыВЗначение("Объект");
		Настоящий.ПриСоздании();
	КонецЕсли;
	Возврат Результат
КонецФункции // ПроверитьНастоящий

//Возвращает в форму результаты выполнения кода
&НаСервере
Процедура РазместитьРезультатВыполненияВРеквизитыС(Настоящий, СОбъекта = Ложь, Прм, ИспользоватьМВТ, Подготовка, ФлагМВТ)
	Если Подготовка Тогда
		Настоящий.ТипизироватьТаблицу(Прм.ТабЗначений);
		Настоящий.СоздатьКолонкиТаблицы(ЭтотОбъект, "ТабЗначений", Прм.ТабЗначений, "Загрузка");
		Настоящий.ТипизироватьТаблицу(Прм.ДопТаблица);
		Настоящий.СоздатьКолонкиТаблицы(ЭтотОбъект, "ДопТаблица", Прм.ДопТаблица, "Загрузка");
		Прм.Удалить("ТабЗначений");
		Прм.Удалить("ДопТаблица");
		Если СОбъекта Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Прм, "ТекстКода,ТабДокумент,Предмет,Буфер");
			Настройки_СКД = Прм.НастройкиСКД;
			Прм.Удалить("ТабДокумент");
			Прм.Удалить("ТекстКода");
			Прм.Удалить("Предмет");
			Прм.Удалить("Буфер");
			Прм.Удалить("НастройкиСКД");
		КонецЕсли;
		ТекстЗапроса = Прм.Запрос_.Текст;
		Если ФлагМВТ <> Неопределено Тогда
			ФлагМВТ.Пометка = ИспользоватьМВТ;
		КонецЕсли;
		АдресСКД = ПоместитьВХранилищеФормы(Прм.СКД, АдресСКД);
		АдресМВТ = ПоместитьВХранилищеФормы(Новый Структура("МВТ", Прм.МВТ), АдресМВТ);
		Прм.Удалить("Запрос_");
		Прм.Удалить("СКД");
		Прм.Удалить("МВТ");
	КонецЕсли;
	ВыгрузитьСтруктуруПараметровС(Прм.СПарам, Настоящий);
	Прм.Удалить("СПарам");
	Прм.Удалить("Алгоритмы");
	Прм.Удалить("ДеревоМД");
КонецПроцедуры

#КонецОбласти

#Область ФОРМА_ДЕРЕВА_ПОДГОТОВКА_ВЫЗОВА
	
// Сохраняет ветвь дерева команд и возвращает адрес
// Возвращаемое значение:
//   Строка   - Адрес сохранённой ветви
&НаСервере
Функция АдресДерева_КомандДляФормы()
	ПолноеДерево = ПолучитьИзВременногоХранилища(АдресДереваМеню);
	НовоеДерево = ПолноеДерево.Скопировать();
	НовоеДерево.Строки.Очистить();
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	Настоящий.СкопироватьДерево(НовоеДерево, ПолноеДерево.Строки.Найти("ДеревоКоманд", "Имя"),, Ложь,, "Результат = ДопИнф <> ""СКРЫТЬ""");
	Результат = ПоместитьВХранилищеФормы(НовоеДерево, УникальныйИдентификатор);
	Возврат Результат
КонецФункции // АдресДерева_КомандДляФормы

//Формирует начальные параметры для запуска формы дерева
&НаКлиенте
Функция НовыеПараметрыФормыДерева();
	СПараметры = Новый Структура;
	//СПараметры.Вставить("АдресДерева", "");
	//СПараметры.Вставить("АдресПроизвольногоПараметра", "");
	//СПараметры.Вставить("АдресРезультата", "");
	СПараметры.Вставить("ВозвращаемыеРеквизиты", "Имя");
	СПараметры.Вставить("ВыбиратьГруппы", Ложь);
	СПараметры.Вставить("ВыборМногих", Ложь);
	СПараметры.Вставить("ДублиСтрокОбрабатыватьКакОднуСтроку", Ложь);
	СПараметры.Вставить("ИмяКолонкиДерева", "Команда");
	СПараметры.Вставить("ИмяКолонкиФлагов", "");
	//СПараметры.Вставить("КомандыФормы", Новый Структура);
	//СПараметры.Вставить("НачальнаяПозиция", Неопределено);
	//СПараметры.Вставить("ОбработкаОбъект", Объект);
	//СПараметры.Вставить("ОбработчикВыбора, "");
	//СПараметры.Вставить("ОбработчикПриЗакрытии, "");
	//СПараметры.Вставить("ОбработчикПриОтакрытии, "");
	//СПараметры.Вставить("ОбработчикПриСоздании, "");
	СПараметры.Вставить("ОтображатьРеквизиты", "-ХотКей,Картинка,Команда");
	СПараметры.Вставить("ПоддержкаВОЛНА_Владельцем", Истина);
	СПараметры.Вставить("ПоправитьФлагиПриОткрытии", Ложь);
	СПараметры.Вставить("ПриОткрытииРаскрытьУровень1", "");
	//СПараметры.Вставить("ПроизвольныйПараметр", Неопределено);
	//СПараметры.Вставить("ПроизвольныйПараметрВХранилище", Неопределено);
	СПараметры.Вставить("РежимВыбораДерева", Истина);
	СПараметры.Вставить("РезультатВТаблицуЗначений", Ложь);
	СПараметры.Вставить("ТолькоПросмотрДерева", Истина);
	СПараметры.Вставить("ТриСостоянияВКолонкеФлагов", "Нигде");
	Возврат СПараметры
КонецФункции

&НаСервереБезКонтекста
Функция СписокПользователейИБ()
	мИмена = Новый Массив;
	Для каждого Юзер Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		мИмена.Добавить(Юзер.Имя);
	КонецЦикла;
	Возврат мИмена
КонецФункции

// Удаляет из МД колонку и помещает в новый адрес
&НаСервере
Процедура ПостроитьМД_ДляВыбора()
	ДеревоМД = ПолучитьИзВременногоХранилища(АдресДереваМД).Скопировать();
	ДеревоМД.Колонки.Удалить("МД");
	АдресДерева_МД_дляВыбора = ПоместитьВХранилищеФормы(ДеревоМД, АдресДерева_МД_дляВыбора);
КонецПроцедуры // ПостроитьМД_ДляВыбора

#КонецОбласти

#КонецОбласти 

