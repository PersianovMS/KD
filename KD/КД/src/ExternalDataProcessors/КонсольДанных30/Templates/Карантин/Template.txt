Из УФорма

#Область КАРАНТИН
	
// Помещает структуру сохранённых команд в хранилище серверных значений
// Параметры:
//  СохранённыеКоманды  - Структура - Структура сохранённых команд
&НаСервере
Процедура СохранённыеКомандыВХСЗ_(СохранённыеКоманды)
	ХСЗ = ПолучитьХСЗ();
	ХСЗ.Вставить("СохранённыеКоманды", СохранённыеКоманды);
	СохранитьХСЗ(ХСЗ);
КонецПроцедуры // СохранённыеКомандыВХСЗ

&НаКлиенте
Процедура ВыполнитьКомандуСписка_(ИмяСписка, СтруктураПараметров)
	СписокКВыбору = СоздатьСписокПоИмени_(ИмяСписка);
	Заголовок_ = "Выбор команды";
	Если СписокКВыбору.Количество() > 0 Тогда
		//Пока ТипЗнч(СписокКВыбору) = Тип("СписокЗначений") Цикл
			//!!!!!!!!!!!!Синхронный вызов. Д.б. исключено!!
			Результат = СписокКВыбору.ВыбратьЭлемент(Заголовок_, СписокКВыбору[?(ПозицииСписков.Свойство(ИмяСписка), ПозицииСписков[ИмяСписка], 0)]);
			Если Результат <> Неопределено Тогда
				ПозицииСписков.Вставить(ИмяСписка, СписокКВыбору.Индекс(Результат));
				ДополнитьЧАКО(Результат.Представление, Результат.Значение, СтруктураПараметров);
				ВыполнениеКодаНаКлиенте(Результат.Значение, СтруктураПараметров, Новый Структура, Объект.ТабДокумент, Объект.Предмет,
						Объект.СписокЗначенийПараметров, Объект.ИспользоватьМВТ, Объект.ТекстКода, Объект.ТекстЗапроса, Объект.Буфер);
				//ВыполнитьЗдесь(Результат.Значение, СтруктураПараметров, Новый Структура);
			Иначе
				СписокКВыбору = Неопределено
			КонецЕсли; 
		//КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры //ВыполнитьКомандуСписка

&НаСервере
Функция СоздатьСписокПоИмени_(ИмяСписка)
	Возврат РеквизитФормыВЗначение("Объект").СоздатьСписокПоИмени(ИмяСписка);
КонецФункции // СоздатьСписокПоИмени()

&НаКлиенте
Процедура БиблиотекаКодов_(Команда)
	ВыполнитьКомандуСписка_("РазделыБиблиотекиКодов", Новый Структура("Кнопка", Команда));
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКод_(ИзЭлемента = Неопределено)
	Если ИзЭлемента = Неопределено Тогда
		ИзЭлемента = ?(ТекущийЭлемент = Элементы.ТекстЗапроса, "ТекстЗапроса", "ТекстКода")
	КонецЕсли; 
	МассивКВыполнению = РазобратьТекстКода();
	Сформировать_Запрос(, Ложь);
	СтруктураПараметров = ЗаполнитьСтруктуруПараметров();
	Для Ё = 1 По МассивКВыполнению.ВГраница() Цикл
		Если (МассивКВыполнению[Ё].Тип = "Форма") Тогда
			ВыполнитьНаКлиенте(МассивКВыполнению[Ё].Код, СтруктураПараметров, МассивКВыполнению[0]); //СтруктураКВыполнению.Форма,,СтруктураКВыполнению.Алгоритмы);
		ИначеЕсли (МассивКВыполнению[Ё].Тип = "Сервер") Тогда
			ВыполнитьНаСервере(МассивКВыполнению[Ё].Код, СтруктураПараметров, МассивКВыполнению[0]); //СтруктураКВыполнению.Форма,,СтруктураКВыполнению.Алгоритмы);
		Иначе
			ВыполнитьВОбработке(МассивКВыполнению[Ё].Код, СтруктураПараметров, МассивКВыполнению[0]); //СтруктураКВыполнению.Объект,,СтруктураКВыполнению.Алгоритмы);
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти 

#Область КАРАНТИН

//!!!!!

&НаСервере
Функция ELFKBNM_ИзмененитьМВТнаСервере()
	Настоящий = Неопределено;
	ПроверитьНастоящий(Настоящий);
	Настоящий.Удалить_МВТ = НЕ Настоящий.Удалить_МВТ;
	//СохранитьНастоящийОбъект(Настоящий);
	Возврат Настоящий.Удалить_МВТ
КонецФункции // ИзмененитьМВТнаСервере

// Вставляет строку-результат в текст задаанного элемента
// Параметры:
//  Результат  - Строка - Результат обрабочика
//  СтруктураПараметров  - Структура - с параметром ИмяЭлементаКуда: Параметры, переданные из обрабочика
&НаКлиенте
Процедура УДАЛИТЬ_ВставитьВыбранноеВЭлемент(Результат, СтруктураПараметров = Неопределено) Экспорт
	Если Результат <> Неопределено Тогда
		Если ЗначениеЗаполнено(Результат.Текст) Тогда
			ВставитьТекстВЭлемент(Результат.Текст, Элементы[СтруктураПараметров.ИмяЭлементаКуда]);
		КонецЕсли; 
		Если ЗначениеЗаполнено(Результат.АдресДерева) Тогда
			УДАЛИТЬ_ПересохранитьНаСервере(АдресДереваМД, Результат.АдресДерева);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ВставитьВыбранноеИзКонфы

//Заменена на библиотечную
// Формирует реквизит и элемент формы по заданной таблице (в т.ч. колонки), а затем загружает туда таблицу
// Параметры:
//  ИмяПриёмника  - Строка - Имя реквизита и элемента, соответствующего загружаемой таблице
//  ТабИсточник  - Строка - Имя реквизита и элемента, соответствующего загружаемой таблице
&НаСервере
Процедура У_СформироватьКолонкиТаблицы(ИмяПриёмника, ТабИсточник)
	МассивДобавляемыхРеквизитов = Новый Массив;
	Для Каждого Колонка Из ТабИсточник.Колонки Цикл 
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "Объект." + ИмяПриёмника, Колонка.Имя); 
		МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы); 
	КонецЦикла;
	МассивУдаляемыхРеквизитов = Новый Массив;
	Для Каждого РеквизитХ Из ПолучитьРеквизиты("Объект." + ИмяПриёмника) Цикл 
		МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяПриёмника + "." + РеквизитХ.Имя); 
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	МассивУдаляемыхРеквизитов = Новый Массив;
	Для Каждого КолонкаХ Из Элементы[ИмяПриёмника].ПодчиненныеЭлементы Цикл
		МассивУдаляемыхРеквизитов.Добавить(КолонкаХ);
	КонецЦикла;
	Для Каждого КолонкаХ Из МассивУдаляемыхРеквизитов Цикл
		Элементы.Удалить(КолонкаХ);
	КонецЦикла;
	Для Каждого Колонка Из ТабИсточник.Колонки Цикл
		Попытка
			Элемент = Элементы.Добавить(ИмяПриёмника + "_" + Колонка.Имя, Тип("ПолеФормы"), Элементы[ИмяПриёмника]); 
			Элемент.Заголовок = Колонка.Имя;
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "Объект." + ИмяПриёмника + "." + Колонка.Имя;
		Исключение
			ООш = ОписаниеОшибки();
			Сообщить("Не удалось добавить колонку " + Колонка.Имя + " по причине: " + ООш)
		КонецПопытки;
	КонецЦикла;
	Объект[ИмяПриёмника].Загрузить(ТабИсточник);//ЗначениеВДанныеФормы(Запрос_.Выполнить().Выгрузить());
КонецПроцедуры // СформироватьКолонкиТаблицы

&НаКлиенте
Функция У_ЧтоСохранятьВКоманде() Экспорт
	Возврат У_ЧтоСохранятьВКомандеНаСервере()
КонецФункции

&НаСервере
Функция У_ЧтоСохранятьВКомандеНаСервере() Экспорт
	Настоящий = Неопределено; ПроверитьНастоящий(Настоящий);//СоздатьИЗаполнитьНастоящийОбъект();
	Возврат Новый Структура(
			"ИмяКоманды,Представление,ПутьККоманде,ПутьККартинке,СохранитьТекстКода,СохранитьТекстЗапроса,СохранитьПредмет,СохранитьПараметры,СохранитьМВТ,СохранитьСКД,СохранитьТаб1,СохранитьТаб2,СохранитьТД",
			"","","","",
			Настоящий.Удалить_ТекстКода <> "",
			Настоящий.ТекстЗапроса <> "",
			Настоящий.Предмет <> Неопределено,
			Настоящий.Удалить_Параметры_.Количество() > 0,
			?(Настоящий.Удалить_МВТ = Неопределено, Ложь, Настоящий.Удалить_МВТ.Таблицы.Количество() > 0),
			Настоящий.Удалить_СКД <> Неопределено,
			Настоящий.Удалить_ТабЗначений.Количество() > 0,
			Настоящий.Удалить_ДопТаблица.Количество() > 0,
			Настоящий.Удалить_ТабДокумент.ВысотаТаблицы > 0);
КонецФункции

#Область ФИКСИРОВАННЫЕ_ПАРАМЕТРЫ_ПЕРЕНЕСТИ_В_ОБЪЕКТ
	
//перенести в объект
Функция УДАЛИТЬ_СписокПолейСтруктурыНастроек()
	Возврат "Настройки,ИндексНастройки";
КонецФункции // СписокПолейСтруктурыНастроек()

// Возвращает список полей ХСЗ через запятую
// Возвращаемое значение:
//   Строка   - Список полей хранилища серверных значений
&НаСервере
Функция УДАЛИТЬ_КлючиХСЗ()
	Возврат "Запрос_,Удалить_СписокЗначенийПараметров,МВТ,СКД,НастройкиСКД,Удалить_СохранённыеКоманды,Удалить_ДеревоКоманд,Удалить_ВстроенныеКоманды"
КонецФункции // КлючиХСЗ
 
#КонецОбласти 

&НаСервере
Функция УД_Сформировать_Запрос(СохранитьОбъект = Истина, ВернутьОбъект = Истина)
	Настоящий = Неопределено; ПроверитьНастоящий(Настоящий);//Этого недостаточно!!!???СоздатьИЗаполнитьНастоящийОбъект();
	Настоящий.СформироватьЗапрос();
	Если СохранитьОбъект Тогда
		//СохранитьНастоящийОбъект(Настоящий);
	КонецЕсли; 
	Возврат ?(ВернутьОбъект, Настоящий, Неопределено)
КонецФункции //Сформировать_Запрос
 
#Область ЧТЕНИЕ_ЗАПИСЬ_НАСТРОЕК_И_КОМАНД
	
&НаКлиенте
//	Читает из файла структуру настроек: поле Настройки - список значений сохранённых настроек, поле ИндексНастройки - индекс автовосстанавливаемой настройки
//	Настройки д.б. ранее записаны в файл командой записи файла настроек.
Процедура УДАЛИТЬ_ПрочитатьНастройкиИзФайла(Обработчик) Экспорт
	Если Объект.Удалить_Файл_ <> "" Тогда
		СтруктураПараметров = Новый Структура("Продолжение", Обработчик);
		ПрочитатьСтрокуИзФайла(Объект.Удалить_Файл_, Новый ОписаниеОповещения("ЗавершитьЧтениеНастроекИзФайла", ЭтотОбъект, СтруктураПараметров));
	КонецЕсли; 
КонецПроцедуры // ПрочитатьНастройкиИзФайла()

// Завершает чтение настроек из файла и помещает их в реквизит обработки
// Параметры:
//  Результат  - Строка - Результат обрабочика
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика
&НаКлиенте
Процедура УДАЛИТЬ_ЗавершитьЧтениеНастроекИзФайла(Результат) Экспорт
	УДАЛИТЬ_НастройкиИзСтрокиНаСервере(Результат);
	//Если ?(СтруктураПараметров = Неопределено, Ложь, СтруктураПараметров.Свойство("Продолжение")) Тогда
	Если Результат.Свойство("Продолжение") Тогда
		ВыполнитьОбработкуОповещения(Результат.Продолжение, Результат);
	КонецЕсли;
КонецПроцедуры // ЗавершитьЧтениеНастроекИзФайла

//Для насильственного выполнения обработчика оповещения (иначе вылетает ошибка по числу параметров)
&НаКлиенте
Процедура УДАЛИТЬ_ЗавершитьЧтениеНастроекИзФайла_Н(ЗдесьНичего, СтруктураПараметров)
	УДАЛИТЬ_ЗавершитьЧтениеНастроекИзФайла(СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура УДАЛИТЬ_ЗаписатьНастройкиВФайл(Индекс_) Экспорт
	ВремСтр = УДАЛИТЬ_СтрокаИзНастроекНаСервере(Индекс_);
	ВремТекст = Новый ТекстовыйДокумент;
	ВремТекст.УстановитьТекст(ВремСтр);
	Попытка
		ВремТекст.Записать(Объект.Удалить_Файл_);
	Исключение
		ООШ = ОписаниеОшибки();
		Сообщить("Не удалось записать настройки по причине: " + ООШ);
	КонецПопытки;
КонецПроцедуры // ЗаписатьНастройкиВФайл()

&НаКлиенте
Процедура УДАЛИТЬ_ПрочитатьСохранённыеКоманды(Обработчик = Неопределено)
	ИмяПараметра = "";
	Если Объект.КаталогСохраненияКоманд = "" Тогда
		УДАЛИТЬ_УстановитьКСКпоУмолчанию();
	КонецЕсли;
	ИмяФайлаСК = Объект.КаталогСохраненияКоманд + "\СохранённыеКоманды.кмд";
	СтруктураПараметров = Новый Структура("Продолжение", Обработчик);
	ПрочитатьСтрокуИзФайла(ИмяФайлаСК, Новый ОписаниеОповещения("ЗавершитьЧтениеСК", ЭтотОбъект, СтруктураПараметров));
КонецПроцедуры

// Завершает чтение СК из файла и заносит в реквизит обработки
// Параметры:
//  СтруктураПараметров  - Структура - Параметры, переданные из обрабочика
&НаКлиенте
Процедура УДАЛИТЬ_ЗавершитьЧтениеСК(СтруктураПараметров = Неопределено) Экспорт  //, Результат)
	//СтруктураПараметров = ?(ЗначениеЗаполнено(СтруктураПараметровПриНасильственномВызове), СтруктураПараметровПриНасильственномВызове, СтруктураПараметров);
	Если СтруктураПараметров <> Неопределено Тогда
		Если ?(СтруктураПараметров.Свойство("Текст"), СтруктураПараметров.Текст, "") <> "" Тогда
			УДАЛИТЬ_СформироватьСКИзСтрокиНаСервере(СтруктураПараметров.Текст);
		КонецЕсли;
		Если СтруктураПараметров.Свойство("Продолжение") Тогда
			ВыполнитьОбработкуОповещения(СтруктураПараметров.Продолжение, СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗавершитьЧтениеСК

//Для насильственного выполнения обработчика оповещения (иначе вылетает ошибка по числу параметров)
&НаКлиенте
Процедура УДАЛИТЬ_ЗавершитьЧтениеСК_Н(ЗдесьНичего, СтруктураПараметров)
	УДАЛИТЬ_ЗавершитьЧтениеСК(СтруктураПараметров);
КонецПроцедуры

// Сохраняет команды во временное хранилище в виде структуры и возвращает адрес
// Возвращаемое значение:
//   Строка   - Адрес хранилища
&НаСервере
Функция УДАЛИТЬ_СохранитьКоманды()
	АдресДляСохраненияКоманд = "";
	СохраняемыеРеквизиты = "Удалить_ВстроенныеУдалить_ДеревоКомандвоКоманд,КаталогСУдалить_СохранённыеКомандыхранённыеКоманды";
	СохраняемаяСтруктура = Новый Структура(СохраняемыеРеквизиты);
	Настоящий = Неопределено; ПроверитьНастоящий(Настоящий);//СоздатьИЗаполнитьНастоящийОбъект();
	ЗаполнитьЗначенияСвойств(СохраняемаяСтруктура, Настоящий);
	Если СохраняемаяСтруктура.КаталогСохраненияКоманд = "" Тогда
		СохраняемаяСтруктура.Вставить("КаталогСохраненияКоманд", Настоящий.КаталогСохраненияКомандПоУмолчанию());
	КонецЕсли;
	Результат = ПоместитьВХранилищеФормы(СохраняемаяСтруктура, АдресДляСохраненияКоманд);
	Возврат Результат
КонецФункции // СохранитьКоманды
 
// Читает команды из временного хранилища в виде структуры и сохраняет их в обработку
// Параметры:
//   Адрес - Строка   - Адрес хранилища
&НаСервере
Процедура УДАЛИТЬ_ПрочитатьКоманды(Адрес)
	Настоящий = Неопределено; ПроверитьНастоящий(Настоящий);//СоздатьИЗаполнитьНастоящийОбъект();
	Источник = ПолучитьИзВременногоХранилища(Адрес);
	Если Источник <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Настоящий, Источник);
		//СохранитьНастоящийОбъект(Настоящий);
	КонецЕсли; 
КонецПроцедуры // ПрочитатьКоманды

// Возвращает текущие настройки диалога как строку
// Параметры:
//  МВТ - Булево - Вернуть менеджер временных таблиц
//  СКД - Булево - Вернуть схему компоновки данных
//  Предмет - Булево - Вернуть значение реквизита Предмет
//  Параметры - Булево - Вернуть таблицу параметров
//  Таб1 - Булево - Вернуть основную таблицу значений
//  Таб2 - Булево - Вернуть доп. таблицу значений
//  ТД - Булево - Вернуть табличный документ
// Возвращаемое значение:
//   Фиксированная структура  - Ключи РеквизитыБезТД (строка, Значения в формате внутренней строки) и ТабДокумент (Табличный докмент)
&НаКлиенте
Функция УДАЛИТЬ_ФССохраненияКоманды(МВТ, СКД, Предмет, Параметры, Таб1, Таб2, ТД) Экспорт
	Возврат УДАЛИТЬ_ФССохраненияКомандыНаСервере(МВТ, СКД, Предмет, Параметры, Таб1, Таб2, ТД)
КонецФункции // ФССохраненияКоманды
 
// Возвращает текущие настройки диалога как строку
// Параметры:
//  МВТ - Булево - Вернуть менеджер временных таблиц
//  СКД - Булево - Вернуть схему компоновки данных
//  Предмет - Булево - Вернуть значение реквизита Предмет
//  Параметры - Булево - Вернуть таблицу параметров
//  Таб1 - Булево - Вернуть основную таблицу значений
//  Таб2 - Булево - Вернуть доп. таблицу значений
//  ТД - Булево - Вернуть табличный документ
// Возвращаемое значение:
//   Фиксированная структура  - Ключи РеквизитыБезТД (строка, Значения в формате внутренней строки) и ТабДокумент (Табличный докмент)
&НаСервере
Функция УДАЛИТЬ_ФССохраненияКомандыНаСервере(МВТ, СКД, Предмет, Параметры, Таб1, Таб2, ТД)
	Настоящий = Неопределено; ПроверитьНастоящий(Настоящий);//СоздатьИЗаполнитьНастоящийОбъект();
	Возврат Новый ФиксированнаяСтруктура(Новый Структура("РеквизитыБезТД,ТабДокумент",
			Настоящий.РеквизитыВСтрокуВнутр(МВТ, СКД, Предмет, Параметры, Таб1, Таб2),
			?(ТД, Настоящий.Удалить_ТабДокумент, Неопределено)))
КонецФункции // ФССохраненияКоманды

#КонецОбласти 

#Область ВРЕМЕННОЕ_ХРАНИЛИЩЕ




&НаСервере
Процедура УДАЛИТЬ_ПересохранитьНаСервере(Приёмник, Источник)
	ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Источник), Приёмник);
КонецПроцедуры // ПересохранитьНаСервере

&НаСервере
Функция УДАЛИТЬ_ПолучитьИзВременногоХранилищаНаСервере(АдресВХ)
	Возврат ПолучитьИзВременногоХранилища(АдресВХ)
КонецФункции // ПолучитьИзВременногоХранилищаНаСервере

#КонецОбласти 

//не 30

#Область ОПЕРАЦИИ_С_ДАННЫМИ_РЕКВИЗИТОВ
	
// Устанавливает каталог сохранения команд по умолчанию
&НаСервере
Процедура УДАЛИТЬ_УстановитьКСКпоУмолчанию()
	Объект.КаталогСохраненияКоманд = РеквизитФормыВЗначение("Объект").КаталогСохраненияКомандПоУмолчанию();
КонецПроцедуры // УстановитьКСКпоУмолчанию

&НаСервере
Процедура УДАЛИТЬ_СформироватьСКИзСтрокиНаСервере(ТекстИсточник)
	ВремОбъект = Неопределено; ПроверитьНастоящий(ВремОбъект);
	ВремОбъект.СформироватьСКпоСтрокеИзФайла(ТекстИсточник.ПолучитьТекст());
	//СохранитьНастоящийОбъект(ВремОбъект);
КонецПроцедуры

&НаСервере
Функция УДАЛИТЬ_СтрокаИзНастроекНаСервере(Индекс_)
	Возврат ЗначениеВСтрокуВнутр(Новый Структура(УДАЛИТЬ_СписокПолейСтруктурыНастроек(), Объект.Настройки_, Индекс_))
КонецФункции

&НаСервере
Процедура УДАЛИТЬ_НастройкиИзСтрокиНаСервере(СтрокаДляРасшифровки)
	СтруктураИзФайла = Новый Структура(УДАЛИТЬ_СписокПолейСтруктурыНастроек());
	Попытка
		СтруктураИзФайла = ЗначениеИзСтрокиВнутр(СтрокаДляРасшифровки);
	Исключение
		СтруктураИзФайла.Вставить("Настройки", Новый СписокЗначений);
		ООШ = ОписаниеОшибки();
		Сообщить("Ошибка чтения файла настроек! " + ООШ);
	КонецПопытки;
	Настоящий = Неопределено; ПроверитьНастоящий(Настоящий);
	Настоящий.Настройки_ = СтруктураИзФайла.Настройки;
	Настоящий.ЗаполнитьРеквизитыОбработкиПоНастройке(СтруктураИзФайла.Индекс_);
	//СохранитьНастоящийОбъект(Настоящий);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

ИЗ МОДУЛЯ ОБЪЕКТА

#Область КАРАНТИН
	
//	Возвращает индекс текущей настройки. Загружает настройки из СтрокиВнутр_
//
// 	Параметры:
//  СтрокаВнутр_  - Строка - Структура настроек в формате СтрокаВнутр. Ключи структуры описываются в СписокПолейСтруктурыНастроек()
//
//	Результат - Число - индекс текущей настройки
Функция УДАЛИТЬ_НастройкиИзСтроки(СтрокаВнутр_) Экспорт
	СтруктураИзФайла = ЗначениеИзСтрокиВнутр(СтрокаВнутр_);
	Настройки_ = СтруктураИзФайла.Настройки;
	КаталогСохраненияКоманд = СтруктураИзФайла.КаталогСохраненияКоманд;
	УДАЛИТЬ_ЗаполнитьРеквизитыОбработкиПоНастройке(СтруктураИзФайла.ИндексНастройки);
	Возврат СтруктураИзФайла.ИндексНастройки
КонецФункции // ПрочитатьНастройкиИзФайла()

Процедура УДАЛИТЬ_ЗаполнитьРеквизитыОбработкиПоНастройке(НомерНастройки) Экспорт
	ОткудаЧитаем = 0;//Настройки_[НомерНастройки];
	СтруктураНастроек = ОткудаЧитаем.Значение;
	ТабЗначений = СтруктураНастроек.ТабРезультат.Скопировать();
	ДопТаблица = СтруктураНастроек.ТабРезультатДоп.Скопировать();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.Вывести(?(СтруктураНастроек.Свойство("ТабДокумент"), СтруктураНастроек.ТабДокумент, Новый ТабличныйДокумент));
	ТекстКода = СтруктураНастроек.ТекстКода;
	ТекстЗапроса = СтруктураНастроек.ТекстЗапроса;
	//ЭлементыФормы.КодНаГлавной.УстановитьТекст(СтруктураНастроек.ТекстКода);
	//ЭлементыФормы.ЗапросНаГлавной.УстановитьТекст(СтруктураНастроек.ТекстЗапроса);
	//ЭлементыФормы.ДопТаблицаНаГлавной.СоздатьКолонки();
	//ЭлементыФормы.ТабЗначений.СоздатьКолонки();
	//ЭлементыФормы.ПолеТДнаГлавной.Вывести(ПолеТДнаГлавной_);
	Параметры_ = СтруктураНастроек.Параметры_.Скопировать();
	//Параметры_.Очистить();
	//Для Каждого КиЗ из ОткудаЧитаем.Значение.СтруктураПараметров Цикл
	//	ЗаполнитьЗначенияСвойств(Параметры_.Добавить(), Новый Структура("ИмяПараметра,ЗначениеПараметра", КиЗ.Ключ, КиЗ.Значение))
	//КонецЦикла;
	МВТ = СтруктураНастроек.МВТ;
	СКД = СтруктураНастроек.СКД;
	НастройкиСКД = СтруктураНастроек.НСКД;
	Предмет = СтруктураНастроек.Предмет;
	ЧАКО = СтруктураНастроек.ЧАКО;
КонецПроцедуры

Функция УДАЛИТЬ_ПоляСохранённойКоманды() Экспорт
	Возврат "Имя,Путь,ТекстКода,ТекстЗапроса,МВТ,СКД,Предмет,Таб1,Таб2,Параметры,ТД,Картинка,Представление"
КонецФункции // ПоляСохранённойКоманды()

Функция УДАЛИТЬ_КаталогСохраненияКомандПоУмолчанию() Экспорт
	Возврат ИмяКаталога(ЭтотОбъект.ИспользуемоеИмяФайла) + "\НастройкиКД\Команды"
КонецФункции // КаталогСохраненияКомандПоУмолчанию()

// Формирует структуру команд по строке, считанной ранее из файла
// Параметры:
//  ТекстСК  - Строка - Строка из файла сохранённых команд
Процедура УДАЛИТЬ_СформироватьСКпоСтрокеИзФайла(ТекстСК) Экспорт
	ИмяПараметра = "";
	СохранённыеКоманды = Новый Структура;
	СчётчикСложнойСтроки = 0;
	СложнаяСтрока = "";
	ТекКоманда = Новый Структура;
	Для Ё = 1 По СтрЧислоСтрок(ТекстСК) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТекстСК, Ё);
		Если СчётчикСложнойСтроки > 0 Тогда
			СчётчикСложнойСтроки = СчётчикСложнойСтроки - 1;
			СложнаяСтрока = СложнаяСтрока + ТекСтрока + Символы.ПС;
		Иначе
			Если СложнаяСтрока <> "" Тогда
				ТекКоманда[?(ИмяПараметра = "#ТЗпр=", "ТекстЗапроса", "ТекстКода")] = СложнаяСтрока;
				СложнаяСтрока = "";
			КонецЕсли;
			ИмяПараметра = Лев(ТекСтрока, 6);
			ТекстПараметра = Сред(ТекСтрока, 7);
			Если ИмяПараметра = "#Имя =" Тогда
				ТекКоманда = Новый Структура(УДАЛИТЬ_ПоляСохранённойКоманды());
				Для каждого КиЗ Из ТекКоманда Цикл
					ТекКоманда.Вставить(КиЗ.Ключ, "");
				КонецЦикла; 
				ТекКоманда.Имя = ТекстПараметра;
				СохранённыеКоманды.Вставить(ТекстПараметра, ТекКоманда);
			ИначеЕсли ИмяПараметра = "#Крт =" Тогда
				ТекКоманда.Картинка = ТекстПараметра;
			ИначеЕсли ИмяПараметра = "#Путь=" Тогда
				ТекКоманда.Путь = ТекстПараметра;
			ИначеЕсли ИмяПараметра = "#Прст=" Тогда
				ТекКоманда.Представление = ТекстПараметра;
			ИначеЕсли ИмяПараметра = "#ТКод=" Тогда
				СчётчикСложнойСтроки = Число(ТекстПараметра);
				ТекКоманда.ТекстКода = "";
			ИначеЕсли ИмяПараметра = "#ТЗпр=" Тогда
				СчётчикСложнойСтроки = Число(ТекстПараметра);
				ТекКоманда.ТекстЗапроса = "";
			ИначеЕсли ИмяПараметра = "#МВТ =" Тогда
				ТекКоманда.МВТ = ТекстПараметра;
			ИначеЕсли ИмяПараметра = "#СКД =" Тогда
				ТекКоманда.СКД = ТекстПараметра;
			ИначеЕсли ИмяПараметра = "#Прдм=" Тогда
				ТекКоманда.Предмет = ТекстПараметра;
			ИначеЕсли ИмяПараметра = "#Таб1=" Тогда
				ТекКоманда.Таб1 = ТекстПараметра;
			ИначеЕсли ИмяПараметра = "#Таб2=" Тогда
				ТекКоманда.Таб2 = ТекстПараметра;
			ИначеЕсли ИмяПараметра = "#ТД  =" Тогда
				ТекКоманда.ТД = ТекстПараметра;
			ИначеЕсли ИмяПараметра = "#Прм =" Тогда
				ТекКоманда.Параметры = ТекстПараметра;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры // СформироватьСКпоСтрокеИзФайла

Процедура УДАЛИТЬ_ИнициализироватьКоманды()
	Макет = ПолучитьМакет("Команды_");
	ВстроенныеКоманды = Новый Структура;
	ВстроенныеКоманды.Вставить("ВсеКоманды", ЗагрузитьТаблицуЗначенийИзТабличногоДокумента(Макет,,,,,,,0));
	Для каждого Строчка Из ВстроенныеКоманды.ВсеКоманды Цикл
		ВстроенныеКоманды.Вставить(Строчка.Имя, Строчка);
	КонецЦикла; 
КонецПроцедуры
 
#КонецОбласти

